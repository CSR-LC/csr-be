# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      flutter_version:
        description: 'Deploy?'
        required: false
        default: 'false'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main","EPMUII-7055" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
#       - name: Test
#         env:
#           min_coverage: '70'
#           coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             set -e
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make test
#             make coverage && coverage_total=$(make coverage_total | tail -n1) && echo $coverage_total



#       - name: Lint
#         uses: addnab/docker-run-action@v3
#         with:
#           image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#            cd /data
#            set -e
#            apk add --update --no-cache make
#            make setup_alpine && make setup && make generate
#            make lint

      - name: Build
        uses: addnab/docker-run-action@v3
        with:
          image: golang:1.19-alpine
          options: -v ${{ github.workspace }}:/data
          run: |
            cd /data
            apk add --update --no-cache make
            make setup_alpine && make setup && make generate
            echo "start build"
            CGO_ENABLED=0 go build -o csr ./cmd/swagger/...

#       - name: Deploy
#         env:
#           min_coverage: '70'
#           coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             set -e
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make test
#             make coverage && coverage_total=$(make coverage_total | tail -n1) && echo $coverage_total
#             #'echo "$coverage_total<70" | bc | grep 0 || (echo "coverage below requirement: 70" && exit 1)'

