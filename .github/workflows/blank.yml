# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
      deploy:
        type: boolean
        description: 'Deploy'
        default: false
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main","EPMUII-7055" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # This workflow contains a single job called "build"
  build:
    environment:
      name: stage
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
#       - name: Test
#         env:
#           min_coverage: '70'
#           coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             set -e
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make test
#             make coverage && coverage_total=$(make coverage_total | tail -n1) && echo $coverage_total



      - name: Lint
        uses: addnab/docker-run-action@v3
        with:
          image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
          options: -v ${{ github.workspace }}:/data
          run: |
           set -e
           cd /data
           echo "1"
           apk add --update --no-cache make
           echo "2"
           apk add --update --no-cache git build-base && rm -rf /var/cache/apk/*
           echo "2.1"
           go install github.com/go-swagger/go-swagger/cmd/swagger@v0.30.0
           echo "2.2"
           go install github.com/vektra/mockery/v2@v2.15.0
           echo "2.3"
           go install entgo.io/ent/cmd/ent@v0.11.2
           echo "2.4"
           swagger generate server -f ./swagger.yaml -s ./internal/generated/swagger/restapi -m ./internal/generated/swagger/models --exclude-main
           echo "2.5"
           swagger generate client -c ./internal/generated/swagger/client -f ./swagger.yaml -m ./internal/generated/swagger/models
           echo "2.6"
           go run -mod=mod entgo.io/ent/cmd/ent generate --target ./internal/generated/ent ./internal/ent/schema
           echo "2.7"
           find ./internal/generated/mocks/* -exec rm -rf {} \; || true
           echo "2.8"
           mockery --all --case snake --dir ./pkg/domain --output ./internal/generated/mocks
           echo "3"
           golangci-lint run --out-format tab > report.txt
           echo "4"
           cat report.txt
           echo "5"
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
            name: lint-report
            path: report.txt
            retention-days: 5

 #       - name: Build
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make build
#       - name: 'Upload Artifact'
#         uses: actions/upload-artifact@v3
#         with:
#             name: my-artifact
#             path: csr
#             retention-days: 5
#       - name: copy file via ssh password
#         if: ${{ github.event.inputs.deploy }}
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.DEPLOY_SSH_HOST }}
#           username: ${{ secrets.DEPLOY_SSH_USER }}
#           key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
#           port: ${{ secrets.DEPLOY_SSH_PORT }}
#           source: csr
#           target: ~/
            
#       - name: Upload artifact to server
# #         if: ${{ github.event.inputs.deploy }} 
#         uses: easingthemes/ssh-deploy@main
#         env:
#           SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
#           REMOTE_HOST: 185.105.91.56 # ${{ secrets.DEPLOY_SSH_HOST }}
#           REMOTE_PORT: 6984 #${{ secrets.DEPLOY_SSH_PORT }}
#           REMOTE_USER: csr #${{ secrets.DEPLOY_SSH_USER }}
#           SOURCE: Makefile
#           TARGET: ~/tmp_csr1
#           EXCLUDE: "/dist/, /node_modules/"


#       - name: Deploy
#         if: ${{ github.event.inputs.deploy }} 
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.DEPLOY_SSH_HOST }}
#           username: ${{ secrets.DEPLOY_SSH_USER }}
#           key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
#           port: ${{ secrets.DEPLOY_SSH_PORT }}
#           script: |
#            mkdir -p /var/www/csr/${{ github.event.inputs.environment }}/
#            echo "${{ secrets.DEPLOY_CONFIG }}" > /var/www/csr/${env}/config.json
#            sudo systemctl daemon-reload && sudo service ${{ github.event.inputs.environment }}.csr stop  
#            cp ~/tmp_csr /var/www/csr/${{ github.event.inputs.environment }}/server 
#            sudo service ${{ github.event.inputs.environment }}.csr start
           
          #  mkdir -p /var/www/csr/${env}/  echo "${{ secrets.DEPLOY_CONFIG }}" > config.json
           # sudo systemctl daemon-reload && sudo service ${env}.csr stop && cp ~/tmp_csr /var/www/csr/${env}/server && sudo service ${env}.csr start
          

#       - name: Deploy
       
#         uses: addnab/docker-run-action@v3
#         with:
#           image: kroniak/ssh-client
#           options:
#             -v ${{ github.workspace }}:/data
#             -e ENV=stage 
#             -e DEPLOY_SSH_PORT=${{ secrets.DEPLOY_SSH_PORT }}
#             -e DEPLOY_SSH_USER=${{ secrets.DEPLOY_SSH_USER }}
#             -e DEPLOY_SSH_HOST=
#             -e DEPLOY_SSH_PRIVATE_KEY=
# #             -e DEPLOY_CONFIG=${{ secrets.DEPLOY_CONFIG }}
            
# #             -
# #             -
# #             -
# #
            
#           run: |
#             cd /data
#             apk add --update --no-cache make
#             echo "$ENV"
#             echo "$DEPLOY_CONFIG"
#             make setup_alpine
#             mkdir -p ~/.ssh
#             echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/.ssh/ssh_deploy
#             chmod -R 700 ~/.ssh
#             echo "$DEPLOY_CONFIG" > ./config.json
#             make deploy_ssh



