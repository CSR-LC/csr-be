# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
    inputs:
      deploy:
        type: choice
        description: Deploy
        options: 
        - no
        - stage
        - prod
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main","EPMUII-7055" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  
  # This workflow contains a single job called "build"
  build:
    environment:
      name: stage
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
#       - name: Test
#         env:
#           min_coverage: '70'
#           coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             set -e
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make test
#             make coverage && coverage_total=$(make coverage_total | tail -n1) && echo $coverage_total



#       - name: Lint
#         uses: addnab/docker-run-action@v3
#         with:
#           image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#            cd /data
#            set -e
#            apk add --update --no-cache make
#            make setup_alpine && make setup && make generate
#            make lint

#       - name: Build
#         uses: addnab/docker-run-action@v3
#         with:
#           image: golang:1.19-alpine
#           options: -v ${{ github.workspace }}:/data
#           run: |
#             cd /data
#             apk add --update --no-cache make
#             make setup_alpine && make setup && make generate && make build
#       - name: 'Upload Artifact'
#         uses: actions/upload-artifact@v3
#         with:
#             name: my-artifact
#             path: csr
#             retention-days: 5
      - name: Redeploy
        if: ${{ github.event.inputs.deploy }} == stage
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_SSH_HOST }}
          username: ${{ secrets.DEPLOY_SSH_USER }}
          key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEPLOY_SSH_PORT }}
          script: |
           
            touch ${{ github.event.inputs.deploy }}
          #  mkdir -p /var/www/csr/${env}/  echo "${{ secrets.DEPLOY_CONFIG }}" > config.json
           # sudo systemctl daemon-reload && sudo service ${env}.csr stop && cp ~/tmp_csr /var/www/csr/${env}/server && sudo service ${env}.csr start
          

#       - name: Deploy
       
#         uses: addnab/docker-run-action@v3
#         with:
#           image: kroniak/ssh-client
#           options:
#             -v ${{ github.workspace }}:/data
#             -e ENV=stage 
#             -e DEPLOY_SSH_PORT=${{ secrets.DEPLOY_SSH_PORT }}
#             -e DEPLOY_SSH_USER=${{ secrets.DEPLOY_SSH_USER }}
#             -e DEPLOY_SSH_HOST=
#             -e DEPLOY_SSH_PRIVATE_KEY=
# #             -e DEPLOY_CONFIG=${{ secrets.DEPLOY_CONFIG }}
            
# #             -
# #             -
# #             -
# #
            
#           run: |
#             cd /data
#             apk add --update --no-cache make
#             echo "$ENV"
#             echo "$DEPLOY_CONFIG"
#             make setup_alpine
#             mkdir -p ~/.ssh
#             echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/.ssh/ssh_deploy
#             chmod -R 700 ~/.ssh
#             echo "$DEPLOY_CONFIG" > ./config.json
#             make deploy_ssh



