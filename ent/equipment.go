// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/equipment"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/kind"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/statuses"
)

// Equipment is the model entity for the Equipment schema.
type Equipment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sku holds the value of the "sku" field.
	Sku string `json:"sku,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// RateHour holds the value of the "rate_hour" field.
	RateHour int64 `json:"rate_hour,omitempty"`
	// RateDay holds the value of the "rate_day" field.
	RateDay int64 `json:"rate_day,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EquipmentQuery when eager-loading is set.
	Edges               EquipmentEdges `json:"edges"`
	kind_equipments     *int
	statuses_equipments *int
}

// EquipmentEdges holds the relations/edges for other nodes in the graph.
type EquipmentEdges struct {
	// Kind holds the value of the kind edge.
	Kind *Kind `json:"kind,omitempty"`
	// Status holds the value of the status edge.
	Status *Statuses `json:"status,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// KindOrErr returns the Kind value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) KindOrErr() (*Kind, error) {
	if e.loadedTypes[0] {
		if e.Kind == nil {
			// The edge kind was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: kind.Label}
		}
		return e.Kind, nil
	}
	return nil, &NotLoadedError{edge: "kind"}
}

// StatusOrErr returns the Status value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EquipmentEdges) StatusOrErr() (*Statuses, error) {
	if e.loadedTypes[1] {
		if e.Status == nil {
			// The edge status was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: statuses.Label}
		}
		return e.Status, nil
	}
	return nil, &NotLoadedError{edge: "status"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Equipment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID, equipment.FieldRateHour, equipment.FieldRateDay:
			values[i] = new(sql.NullInt64)
		case equipment.FieldSku, equipment.FieldName, equipment.FieldDescription:
			values[i] = new(sql.NullString)
		case equipment.ForeignKeys[0]: // kind_equipments
			values[i] = new(sql.NullInt64)
		case equipment.ForeignKeys[1]: // statuses_equipments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Equipment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Equipment fields.
func (e *Equipment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case equipment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case equipment.FieldSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sku", values[i])
			} else if value.Valid {
				e.Sku = value.String
			}
		case equipment.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				e.Name = value.String
			}
		case equipment.FieldRateHour:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rate_hour", values[i])
			} else if value.Valid {
				e.RateHour = value.Int64
			}
		case equipment.FieldRateDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rate_day", values[i])
			} else if value.Valid {
				e.RateDay = value.Int64
			}
		case equipment.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				e.Description = value.String
			}
		case equipment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field kind_equipments", value)
			} else if value.Valid {
				e.kind_equipments = new(int)
				*e.kind_equipments = int(value.Int64)
			}
		case equipment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field statuses_equipments", value)
			} else if value.Valid {
				e.statuses_equipments = new(int)
				*e.statuses_equipments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryKind queries the "kind" edge of the Equipment entity.
func (e *Equipment) QueryKind() *KindQuery {
	return (&EquipmentClient{config: e.config}).QueryKind(e)
}

// QueryStatus queries the "status" edge of the Equipment entity.
func (e *Equipment) QueryStatus() *StatusesQuery {
	return (&EquipmentClient{config: e.config}).QueryStatus(e)
}

// Update returns a builder for updating this Equipment.
// Note that you need to call Equipment.Unwrap() before calling this method if this Equipment
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Equipment) Update() *EquipmentUpdateOne {
	return (&EquipmentClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Equipment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Equipment) Unwrap() *Equipment {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Equipment is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Equipment) String() string {
	var builder strings.Builder
	builder.WriteString("Equipment(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", sku=")
	builder.WriteString(e.Sku)
	builder.WriteString(", name=")
	builder.WriteString(e.Name)
	builder.WriteString(", rate_hour=")
	builder.WriteString(fmt.Sprintf("%v", e.RateHour))
	builder.WriteString(", rate_day=")
	builder.WriteString(fmt.Sprintf("%v", e.RateDay))
	builder.WriteString(", description=")
	builder.WriteString(e.Description)
	builder.WriteByte(')')
	return builder.String()
}

// EquipmentSlice is a parsable slice of Equipment.
type EquipmentSlice []*Equipment

func (e EquipmentSlice) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
