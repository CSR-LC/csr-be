// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/equipment"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/kind"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/predicate"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/statuses"
)

// EquipmentUpdate is the builder for updating Equipment entities.
type EquipmentUpdate struct {
	config
	hooks    []Hook
	mutation *EquipmentMutation
}

// Where appends a list predicates to the EquipmentUpdate builder.
func (eu *EquipmentUpdate) Where(ps ...predicate.Equipment) *EquipmentUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetSku sets the "sku" field.
func (eu *EquipmentUpdate) SetSku(s string) *EquipmentUpdate {
	eu.mutation.SetSku(s)
	return eu
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableSku(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetSku(*s)
	}
	return eu
}

// SetName sets the "name" field.
func (eu *EquipmentUpdate) SetName(s string) *EquipmentUpdate {
	eu.mutation.SetName(s)
	return eu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableName(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetName(*s)
	}
	return eu
}

// SetRateHour sets the "rate_hour" field.
func (eu *EquipmentUpdate) SetRateHour(i int64) *EquipmentUpdate {
	eu.mutation.ResetRateHour()
	eu.mutation.SetRateHour(i)
	return eu
}

// AddRateHour adds i to the "rate_hour" field.
func (eu *EquipmentUpdate) AddRateHour(i int64) *EquipmentUpdate {
	eu.mutation.AddRateHour(i)
	return eu
}

// SetRateDay sets the "rate_day" field.
func (eu *EquipmentUpdate) SetRateDay(i int64) *EquipmentUpdate {
	eu.mutation.ResetRateDay()
	eu.mutation.SetRateDay(i)
	return eu
}

// AddRateDay adds i to the "rate_day" field.
func (eu *EquipmentUpdate) AddRateDay(i int64) *EquipmentUpdate {
	eu.mutation.AddRateDay(i)
	return eu
}

// SetDescription sets the "description" field.
func (eu *EquipmentUpdate) SetDescription(s string) *EquipmentUpdate {
	eu.mutation.SetDescription(s)
	return eu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableDescription(s *string) *EquipmentUpdate {
	if s != nil {
		eu.SetDescription(*s)
	}
	return eu
}

// SetKindID sets the "kind" edge to the Kind entity by ID.
func (eu *EquipmentUpdate) SetKindID(id int) *EquipmentUpdate {
	eu.mutation.SetKindID(id)
	return eu
}

// SetNillableKindID sets the "kind" edge to the Kind entity by ID if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableKindID(id *int) *EquipmentUpdate {
	if id != nil {
		eu = eu.SetKindID(*id)
	}
	return eu
}

// SetKind sets the "kind" edge to the Kind entity.
func (eu *EquipmentUpdate) SetKind(k *Kind) *EquipmentUpdate {
	return eu.SetKindID(k.ID)
}

// SetStatusID sets the "status" edge to the Statuses entity by ID.
func (eu *EquipmentUpdate) SetStatusID(id int) *EquipmentUpdate {
	eu.mutation.SetStatusID(id)
	return eu
}

// SetNillableStatusID sets the "status" edge to the Statuses entity by ID if the given value is not nil.
func (eu *EquipmentUpdate) SetNillableStatusID(id *int) *EquipmentUpdate {
	if id != nil {
		eu = eu.SetStatusID(*id)
	}
	return eu
}

// SetStatus sets the "status" edge to the Statuses entity.
func (eu *EquipmentUpdate) SetStatus(s *Statuses) *EquipmentUpdate {
	return eu.SetStatusID(s.ID)
}

// Mutation returns the EquipmentMutation object of the builder.
func (eu *EquipmentUpdate) Mutation() *EquipmentMutation {
	return eu.mutation
}

// ClearKind clears the "kind" edge to the Kind entity.
func (eu *EquipmentUpdate) ClearKind() *EquipmentUpdate {
	eu.mutation.ClearKind()
	return eu
}

// ClearStatus clears the "status" edge to the Statuses entity.
func (eu *EquipmentUpdate) ClearStatus() *EquipmentUpdate {
	eu.mutation.ClearStatus()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EquipmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EquipmentUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EquipmentUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EquipmentUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EquipmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipment.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Sku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSku,
		})
	}
	if value, ok := eu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldName,
		})
	}
	if value, ok := eu.mutation.RateHour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateHour,
		})
	}
	if value, ok := eu.mutation.AddedRateHour(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateHour,
		})
	}
	if value, ok := eu.mutation.RateDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateDay,
		})
	}
	if value, ok := eu.mutation.AddedRateDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateDay,
		})
	}
	if value, ok := eu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldDescription,
		})
	}
	if eu.mutation.KindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.KindTable,
			Columns: []string{equipment.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kind.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.KindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.KindTable,
			Columns: []string{equipment.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kind.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.StatusTable,
			Columns: []string{equipment.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuses.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.StatusTable,
			Columns: []string{equipment.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuses.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EquipmentUpdateOne is the builder for updating a single Equipment entity.
type EquipmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EquipmentMutation
}

// SetSku sets the "sku" field.
func (euo *EquipmentUpdateOne) SetSku(s string) *EquipmentUpdateOne {
	euo.mutation.SetSku(s)
	return euo
}

// SetNillableSku sets the "sku" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableSku(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetSku(*s)
	}
	return euo
}

// SetName sets the "name" field.
func (euo *EquipmentUpdateOne) SetName(s string) *EquipmentUpdateOne {
	euo.mutation.SetName(s)
	return euo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableName(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetName(*s)
	}
	return euo
}

// SetRateHour sets the "rate_hour" field.
func (euo *EquipmentUpdateOne) SetRateHour(i int64) *EquipmentUpdateOne {
	euo.mutation.ResetRateHour()
	euo.mutation.SetRateHour(i)
	return euo
}

// AddRateHour adds i to the "rate_hour" field.
func (euo *EquipmentUpdateOne) AddRateHour(i int64) *EquipmentUpdateOne {
	euo.mutation.AddRateHour(i)
	return euo
}

// SetRateDay sets the "rate_day" field.
func (euo *EquipmentUpdateOne) SetRateDay(i int64) *EquipmentUpdateOne {
	euo.mutation.ResetRateDay()
	euo.mutation.SetRateDay(i)
	return euo
}

// AddRateDay adds i to the "rate_day" field.
func (euo *EquipmentUpdateOne) AddRateDay(i int64) *EquipmentUpdateOne {
	euo.mutation.AddRateDay(i)
	return euo
}

// SetDescription sets the "description" field.
func (euo *EquipmentUpdateOne) SetDescription(s string) *EquipmentUpdateOne {
	euo.mutation.SetDescription(s)
	return euo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableDescription(s *string) *EquipmentUpdateOne {
	if s != nil {
		euo.SetDescription(*s)
	}
	return euo
}

// SetKindID sets the "kind" edge to the Kind entity by ID.
func (euo *EquipmentUpdateOne) SetKindID(id int) *EquipmentUpdateOne {
	euo.mutation.SetKindID(id)
	return euo
}

// SetNillableKindID sets the "kind" edge to the Kind entity by ID if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableKindID(id *int) *EquipmentUpdateOne {
	if id != nil {
		euo = euo.SetKindID(*id)
	}
	return euo
}

// SetKind sets the "kind" edge to the Kind entity.
func (euo *EquipmentUpdateOne) SetKind(k *Kind) *EquipmentUpdateOne {
	return euo.SetKindID(k.ID)
}

// SetStatusID sets the "status" edge to the Statuses entity by ID.
func (euo *EquipmentUpdateOne) SetStatusID(id int) *EquipmentUpdateOne {
	euo.mutation.SetStatusID(id)
	return euo
}

// SetNillableStatusID sets the "status" edge to the Statuses entity by ID if the given value is not nil.
func (euo *EquipmentUpdateOne) SetNillableStatusID(id *int) *EquipmentUpdateOne {
	if id != nil {
		euo = euo.SetStatusID(*id)
	}
	return euo
}

// SetStatus sets the "status" edge to the Statuses entity.
func (euo *EquipmentUpdateOne) SetStatus(s *Statuses) *EquipmentUpdateOne {
	return euo.SetStatusID(s.ID)
}

// Mutation returns the EquipmentMutation object of the builder.
func (euo *EquipmentUpdateOne) Mutation() *EquipmentMutation {
	return euo.mutation
}

// ClearKind clears the "kind" edge to the Kind entity.
func (euo *EquipmentUpdateOne) ClearKind() *EquipmentUpdateOne {
	euo.mutation.ClearKind()
	return euo
}

// ClearStatus clears the "status" edge to the Statuses entity.
func (euo *EquipmentUpdateOne) ClearStatus() *EquipmentUpdateOne {
	euo.mutation.ClearStatus()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EquipmentUpdateOne) Select(field string, fields ...string) *EquipmentUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Equipment entity.
func (euo *EquipmentUpdateOne) Save(ctx context.Context) (*Equipment, error) {
	var (
		err  error
		node *Equipment
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EquipmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EquipmentUpdateOne) SaveX(ctx context.Context) *Equipment {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EquipmentUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EquipmentUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EquipmentUpdateOne) sqlSave(ctx context.Context) (_node *Equipment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   equipment.Table,
			Columns: equipment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: equipment.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Equipment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, equipment.FieldID)
		for _, f := range fields {
			if !equipment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != equipment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.Sku(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldSku,
		})
	}
	if value, ok := euo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldName,
		})
	}
	if value, ok := euo.mutation.RateHour(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateHour,
		})
	}
	if value, ok := euo.mutation.AddedRateHour(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateHour,
		})
	}
	if value, ok := euo.mutation.RateDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateDay,
		})
	}
	if value, ok := euo.mutation.AddedRateDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: equipment.FieldRateDay,
		})
	}
	if value, ok := euo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: equipment.FieldDescription,
		})
	}
	if euo.mutation.KindCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.KindTable,
			Columns: []string{equipment.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kind.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.KindIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.KindTable,
			Columns: []string{equipment.KindColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: kind.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.StatusTable,
			Columns: []string{equipment.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuses.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   equipment.StatusTable,
			Columns: []string{equipment.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: statuses.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Equipment{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{equipment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
