// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/role"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Login holds the value of the "login" field.
	Login string `json:"login,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Surname holds the value of the "surname" field.
	Surname *string `json:"surname,omitempty"`
	// Patronymic holds the value of the "patronymic" field.
	Patronymic *string `json:"patronymic,omitempty"`
	// PassportSeries holds the value of the "passport_series" field.
	PassportSeries *string `json:"passport_series,omitempty"`
	// PassportNumber holds the value of the "passport_number" field.
	PassportNumber *string `json:"passport_number,omitempty"`
	// PassportAuthority holds the value of the "passport_authority" field.
	PassportAuthority *string `json:"passport_authority,omitempty"`
	// PassportIssueDate holds the value of the "passport_issue_date" field.
	PassportIssueDate time.Time `json:"passport_issue_date,omitempty"`
	// Phone holds the value of the "phone" field.
	Phone *string `json:"phone,omitempty"`
	// IsBlocked holds the value of the "is_blocked" field.
	IsBlocked bool `json:"is_blocked,omitempty"`
	// Type holds the value of the "type" field.
	Type user.Type `json:"type,omitempty"`
	// OrgName holds the value of the "org_name" field.
	OrgName *string `json:"org_name,omitempty"`
	// Website holds the value of the "website" field.
	Website *string `json:"website,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges             UserEdges `json:"edges"`
	active_area_users *int
	role_users        *int
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// Role holds the value of the role edge.
	Role *Role `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) RoleOrErr() (*Role, error) {
	if e.loadedTypes[1] {
		if e.Role == nil {
			// The edge role was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: role.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsBlocked:
			values[i] = new(sql.NullBool)
		case user.FieldID:
			values[i] = new(sql.NullInt64)
		case user.FieldLogin, user.FieldEmail, user.FieldPassword, user.FieldName, user.FieldSurname, user.FieldPatronymic, user.FieldPassportSeries, user.FieldPassportNumber, user.FieldPassportAuthority, user.FieldPhone, user.FieldType, user.FieldOrgName, user.FieldWebsite:
			values[i] = new(sql.NullString)
		case user.FieldPassportIssueDate:
			values[i] = new(sql.NullTime)
		case user.ForeignKeys[0]: // active_area_users
			values[i] = new(sql.NullInt64)
		case user.ForeignKeys[1]: // role_users
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldLogin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field login", values[i])
			} else if value.Valid {
				u.Login = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldSurname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field surname", values[i])
			} else if value.Valid {
				u.Surname = new(string)
				*u.Surname = value.String
			}
		case user.FieldPatronymic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field patronymic", values[i])
			} else if value.Valid {
				u.Patronymic = new(string)
				*u.Patronymic = value.String
			}
		case user.FieldPassportSeries:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passport_series", values[i])
			} else if value.Valid {
				u.PassportSeries = new(string)
				*u.PassportSeries = value.String
			}
		case user.FieldPassportNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passport_number", values[i])
			} else if value.Valid {
				u.PassportNumber = new(string)
				*u.PassportNumber = value.String
			}
		case user.FieldPassportAuthority:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field passport_authority", values[i])
			} else if value.Valid {
				u.PassportAuthority = new(string)
				*u.PassportAuthority = value.String
			}
		case user.FieldPassportIssueDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field passport_issue_date", values[i])
			} else if value.Valid {
				u.PassportIssueDate = value.Time
			}
		case user.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				u.Phone = new(string)
				*u.Phone = value.String
			}
		case user.FieldIsBlocked:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_blocked", values[i])
			} else if value.Valid {
				u.IsBlocked = value.Bool
			}
		case user.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				u.Type = user.Type(value.String)
			}
		case user.FieldOrgName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field org_name", values[i])
			} else if value.Valid {
				u.OrgName = new(string)
				*u.OrgName = value.String
			}
		case user.FieldWebsite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field website", values[i])
			} else if value.Valid {
				u.Website = new(string)
				*u.Website = value.String
			}
		case user.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field active_area_users", value)
			} else if value.Valid {
				u.active_area_users = new(int)
				*u.active_area_users = int(value.Int64)
			}
		case user.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field role_users", value)
			} else if value.Valid {
				u.role_users = new(int)
				*u.role_users = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return (&UserClient{config: u.config}).QueryGroups(u)
}

// QueryRole queries the "role" edge of the User entity.
func (u *User) QueryRole() *RoleQuery {
	return (&UserClient{config: u.config}).QueryRole(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", login=")
	builder.WriteString(u.Login)
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	if v := u.Surname; v != nil {
		builder.WriteString(", surname=")
		builder.WriteString(*v)
	}
	if v := u.Patronymic; v != nil {
		builder.WriteString(", patronymic=")
		builder.WriteString(*v)
	}
	if v := u.PassportSeries; v != nil {
		builder.WriteString(", passport_series=")
		builder.WriteString(*v)
	}
	if v := u.PassportNumber; v != nil {
		builder.WriteString(", passport_number=")
		builder.WriteString(*v)
	}
	if v := u.PassportAuthority; v != nil {
		builder.WriteString(", passport_authority=")
		builder.WriteString(*v)
	}
	builder.WriteString(", passport_issue_date=")
	builder.WriteString(u.PassportIssueDate.Format(time.ANSIC))
	if v := u.Phone; v != nil {
		builder.WriteString(", phone=")
		builder.WriteString(*v)
	}
	builder.WriteString(", is_blocked=")
	builder.WriteString(fmt.Sprintf("%v", u.IsBlocked))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", u.Type))
	if v := u.OrgName; v != nil {
		builder.WriteString(", org_name=")
		builder.WriteString(*v)
	}
	if v := u.Website; v != nil {
		builder.WriteString(", website=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
