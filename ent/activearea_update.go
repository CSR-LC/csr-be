// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/activearea"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/predicate"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/user"
)

// ActiveAreaUpdate is the builder for updating ActiveArea entities.
type ActiveAreaUpdate struct {
	config
	hooks    []Hook
	mutation *ActiveAreaMutation
}

// Where appends a list predicates to the ActiveAreaUpdate builder.
func (aau *ActiveAreaUpdate) Where(ps ...predicate.ActiveArea) *ActiveAreaUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetName sets the "name" field.
func (aau *ActiveAreaUpdate) SetName(s string) *ActiveAreaUpdate {
	aau.mutation.SetName(s)
	return aau
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (aau *ActiveAreaUpdate) AddUserIDs(ids ...int) *ActiveAreaUpdate {
	aau.mutation.AddUserIDs(ids...)
	return aau
}

// AddUsers adds the "users" edges to the User entity.
func (aau *ActiveAreaUpdate) AddUsers(u ...*User) *ActiveAreaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aau.AddUserIDs(ids...)
}

// Mutation returns the ActiveAreaMutation object of the builder.
func (aau *ActiveAreaUpdate) Mutation() *ActiveAreaMutation {
	return aau.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (aau *ActiveAreaUpdate) ClearUsers() *ActiveAreaUpdate {
	aau.mutation.ClearUsers()
	return aau
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (aau *ActiveAreaUpdate) RemoveUserIDs(ids ...int) *ActiveAreaUpdate {
	aau.mutation.RemoveUserIDs(ids...)
	return aau
}

// RemoveUsers removes "users" edges to User entities.
func (aau *ActiveAreaUpdate) RemoveUsers(u ...*User) *ActiveAreaUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aau.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *ActiveAreaUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aau.hooks) == 0 {
		if err = aau.check(); err != nil {
			return 0, err
		}
		affected, err = aau.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActiveAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aau.check(); err != nil {
				return 0, err
			}
			aau.mutation = mutation
			affected, err = aau.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aau.hooks) - 1; i >= 0; i-- {
			if aau.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aau.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aau.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aau *ActiveAreaUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *ActiveAreaUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *ActiveAreaUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *ActiveAreaUpdate) check() error {
	if v, ok := aau.mutation.Name(); ok {
		if err := activearea.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ActiveArea.name": %w`, err)}
		}
	}
	return nil
}

func (aau *ActiveAreaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activearea.Table,
			Columns: activearea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activearea.FieldID,
			},
		},
	}
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activearea.FieldName,
		})
	}
	if aau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aau.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aau.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activearea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ActiveAreaUpdateOne is the builder for updating a single ActiveArea entity.
type ActiveAreaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ActiveAreaMutation
}

// SetName sets the "name" field.
func (aauo *ActiveAreaUpdateOne) SetName(s string) *ActiveAreaUpdateOne {
	aauo.mutation.SetName(s)
	return aauo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (aauo *ActiveAreaUpdateOne) AddUserIDs(ids ...int) *ActiveAreaUpdateOne {
	aauo.mutation.AddUserIDs(ids...)
	return aauo
}

// AddUsers adds the "users" edges to the User entity.
func (aauo *ActiveAreaUpdateOne) AddUsers(u ...*User) *ActiveAreaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aauo.AddUserIDs(ids...)
}

// Mutation returns the ActiveAreaMutation object of the builder.
func (aauo *ActiveAreaUpdateOne) Mutation() *ActiveAreaMutation {
	return aauo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (aauo *ActiveAreaUpdateOne) ClearUsers() *ActiveAreaUpdateOne {
	aauo.mutation.ClearUsers()
	return aauo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (aauo *ActiveAreaUpdateOne) RemoveUserIDs(ids ...int) *ActiveAreaUpdateOne {
	aauo.mutation.RemoveUserIDs(ids...)
	return aauo
}

// RemoveUsers removes "users" edges to User entities.
func (aauo *ActiveAreaUpdateOne) RemoveUsers(u ...*User) *ActiveAreaUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return aauo.RemoveUserIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *ActiveAreaUpdateOne) Select(field string, fields ...string) *ActiveAreaUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated ActiveArea entity.
func (aauo *ActiveAreaUpdateOne) Save(ctx context.Context) (*ActiveArea, error) {
	var (
		err  error
		node *ActiveArea
	)
	if len(aauo.hooks) == 0 {
		if err = aauo.check(); err != nil {
			return nil, err
		}
		node, err = aauo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActiveAreaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aauo.check(); err != nil {
				return nil, err
			}
			aauo.mutation = mutation
			node, err = aauo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aauo.hooks) - 1; i >= 0; i-- {
			if aauo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = aauo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aauo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *ActiveAreaUpdateOne) SaveX(ctx context.Context) *ActiveArea {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *ActiveAreaUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *ActiveAreaUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *ActiveAreaUpdateOne) check() error {
	if v, ok := aauo.mutation.Name(); ok {
		if err := activearea.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "ActiveArea.name": %w`, err)}
		}
	}
	return nil
}

func (aauo *ActiveAreaUpdateOne) sqlSave(ctx context.Context) (_node *ActiveArea, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activearea.Table,
			Columns: activearea.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activearea.FieldID,
			},
		},
	}
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ActiveArea.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, activearea.FieldID)
		for _, f := range fields {
			if !activearea.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != activearea.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activearea.FieldName,
		})
	}
	if aauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !aauo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aauo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   activearea.UsersTable,
			Columns: []string{activearea.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ActiveArea{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activearea.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
