// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/group"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/predicate"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/role"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetLogin sets the "login" field.
func (uu *UserUpdate) SetLogin(s string) *UserUpdate {
	uu.mutation.SetLogin(s)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetSurname sets the "surname" field.
func (uu *UserUpdate) SetSurname(s string) *UserUpdate {
	uu.mutation.SetSurname(s)
	return uu
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSurname(s *string) *UserUpdate {
	if s != nil {
		uu.SetSurname(*s)
	}
	return uu
}

// ClearSurname clears the value of the "surname" field.
func (uu *UserUpdate) ClearSurname() *UserUpdate {
	uu.mutation.ClearSurname()
	return uu
}

// SetPatronymic sets the "patronymic" field.
func (uu *UserUpdate) SetPatronymic(s string) *UserUpdate {
	uu.mutation.SetPatronymic(s)
	return uu
}

// SetNillablePatronymic sets the "patronymic" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePatronymic(s *string) *UserUpdate {
	if s != nil {
		uu.SetPatronymic(*s)
	}
	return uu
}

// ClearPatronymic clears the value of the "patronymic" field.
func (uu *UserUpdate) ClearPatronymic() *UserUpdate {
	uu.mutation.ClearPatronymic()
	return uu
}

// SetPassportSeries sets the "passport_series" field.
func (uu *UserUpdate) SetPassportSeries(s string) *UserUpdate {
	uu.mutation.SetPassportSeries(s)
	return uu
}

// SetNillablePassportSeries sets the "passport_series" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassportSeries(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassportSeries(*s)
	}
	return uu
}

// ClearPassportSeries clears the value of the "passport_series" field.
func (uu *UserUpdate) ClearPassportSeries() *UserUpdate {
	uu.mutation.ClearPassportSeries()
	return uu
}

// SetPassportNumber sets the "passport_number" field.
func (uu *UserUpdate) SetPassportNumber(s string) *UserUpdate {
	uu.mutation.SetPassportNumber(s)
	return uu
}

// SetNillablePassportNumber sets the "passport_number" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassportNumber(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassportNumber(*s)
	}
	return uu
}

// ClearPassportNumber clears the value of the "passport_number" field.
func (uu *UserUpdate) ClearPassportNumber() *UserUpdate {
	uu.mutation.ClearPassportNumber()
	return uu
}

// SetPassportAuthority sets the "passport_authority" field.
func (uu *UserUpdate) SetPassportAuthority(s string) *UserUpdate {
	uu.mutation.SetPassportAuthority(s)
	return uu
}

// SetNillablePassportAuthority sets the "passport_authority" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassportAuthority(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassportAuthority(*s)
	}
	return uu
}

// ClearPassportAuthority clears the value of the "passport_authority" field.
func (uu *UserUpdate) ClearPassportAuthority() *UserUpdate {
	uu.mutation.ClearPassportAuthority()
	return uu
}

// SetPassportIssueDate sets the "passport_issue_date" field.
func (uu *UserUpdate) SetPassportIssueDate(t time.Time) *UserUpdate {
	uu.mutation.SetPassportIssueDate(t)
	return uu
}

// SetNillablePassportIssueDate sets the "passport_issue_date" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassportIssueDate(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetPassportIssueDate(*t)
	}
	return uu
}

// ClearPassportIssueDate clears the value of the "passport_issue_date" field.
func (uu *UserUpdate) ClearPassportIssueDate() *UserUpdate {
	uu.mutation.ClearPassportIssueDate()
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetIsBlocked sets the "is_blocked" field.
func (uu *UserUpdate) SetIsBlocked(b bool) *UserUpdate {
	uu.mutation.SetIsBlocked(b)
	return uu
}

// SetNillableIsBlocked sets the "is_blocked" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsBlocked(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsBlocked(*b)
	}
	return uu
}

// SetType sets the "type" field.
func (uu *UserUpdate) SetType(u user.Type) *UserUpdate {
	uu.mutation.SetType(u)
	return uu
}

// SetOrgName sets the "org_name" field.
func (uu *UserUpdate) SetOrgName(s string) *UserUpdate {
	uu.mutation.SetOrgName(s)
	return uu
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOrgName(s *string) *UserUpdate {
	if s != nil {
		uu.SetOrgName(*s)
	}
	return uu
}

// ClearOrgName clears the value of the "org_name" field.
func (uu *UserUpdate) ClearOrgName() *UserUpdate {
	uu.mutation.ClearOrgName()
	return uu
}

// SetWebsite sets the "website" field.
func (uu *UserUpdate) SetWebsite(s string) *UserUpdate {
	uu.mutation.SetWebsite(s)
	return uu
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWebsite(s *string) *UserUpdate {
	if s != nil {
		uu.SetWebsite(*s)
	}
	return uu
}

// ClearWebsite clears the value of the "website" field.
func (uu *UserUpdate) ClearWebsite() *UserUpdate {
	uu.mutation.ClearWebsite()
	return uu
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.AddGroupIDs(ids...)
	return uu
}

// AddGroups adds the "groups" edges to the Group entity.
func (uu *UserUpdate) AddGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uu *UserUpdate) SetRoleID(id int) *UserUpdate {
	uu.mutation.SetRoleID(id)
	return uu
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetRoleID(*id)
	}
	return uu
}

// SetRole sets the "role" edge to the Role entity.
func (uu *UserUpdate) SetRole(r *Role) *UserUpdate {
	return uu.SetRoleID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uu *UserUpdate) ClearGroups() *UserUpdate {
	uu.mutation.ClearGroups()
	return uu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveGroupIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveGroupIDs(ids...)
	return uu
}

// RemoveGroups removes "groups" edges to Group entities.
func (uu *UserUpdate) RemoveGroups(g ...*Group) *UserUpdate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (uu *UserUpdate) ClearRole() *UserUpdate {
	uu.mutation.ClearRole()
	return uu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Surname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSurname,
		})
	}
	if uu.mutation.SurnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSurname,
		})
	}
	if value, ok := uu.mutation.Patronymic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPatronymic,
		})
	}
	if uu.mutation.PatronymicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPatronymic,
		})
	}
	if value, ok := uu.mutation.PassportSeries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportSeries,
		})
	}
	if uu.mutation.PassportSeriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportSeries,
		})
	}
	if value, ok := uu.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportNumber,
		})
	}
	if uu.mutation.PassportNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportNumber,
		})
	}
	if value, ok := uu.mutation.PassportAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportAuthority,
		})
	}
	if uu.mutation.PassportAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportAuthority,
		})
	}
	if value, ok := uu.mutation.PassportIssueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPassportIssueDate,
		})
	}
	if uu.mutation.PassportIssueDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldPassportIssueDate,
		})
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if uu.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.IsBlocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsBlocked,
		})
	}
	if value, ok := uu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldType,
		})
	}
	if value, ok := uu.mutation.OrgName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldOrgName,
		})
	}
	if uu.mutation.OrgNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldOrgName,
		})
	}
	if value, ok := uu.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldWebsite,
		})
	}
	if uu.mutation.WebsiteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldWebsite,
		})
	}
	if uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetLogin sets the "login" field.
func (uuo *UserUpdateOne) SetLogin(s string) *UserUpdateOne {
	uuo.mutation.SetLogin(s)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetSurname sets the "surname" field.
func (uuo *UserUpdateOne) SetSurname(s string) *UserUpdateOne {
	uuo.mutation.SetSurname(s)
	return uuo
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSurname(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSurname(*s)
	}
	return uuo
}

// ClearSurname clears the value of the "surname" field.
func (uuo *UserUpdateOne) ClearSurname() *UserUpdateOne {
	uuo.mutation.ClearSurname()
	return uuo
}

// SetPatronymic sets the "patronymic" field.
func (uuo *UserUpdateOne) SetPatronymic(s string) *UserUpdateOne {
	uuo.mutation.SetPatronymic(s)
	return uuo
}

// SetNillablePatronymic sets the "patronymic" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePatronymic(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPatronymic(*s)
	}
	return uuo
}

// ClearPatronymic clears the value of the "patronymic" field.
func (uuo *UserUpdateOne) ClearPatronymic() *UserUpdateOne {
	uuo.mutation.ClearPatronymic()
	return uuo
}

// SetPassportSeries sets the "passport_series" field.
func (uuo *UserUpdateOne) SetPassportSeries(s string) *UserUpdateOne {
	uuo.mutation.SetPassportSeries(s)
	return uuo
}

// SetNillablePassportSeries sets the "passport_series" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassportSeries(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassportSeries(*s)
	}
	return uuo
}

// ClearPassportSeries clears the value of the "passport_series" field.
func (uuo *UserUpdateOne) ClearPassportSeries() *UserUpdateOne {
	uuo.mutation.ClearPassportSeries()
	return uuo
}

// SetPassportNumber sets the "passport_number" field.
func (uuo *UserUpdateOne) SetPassportNumber(s string) *UserUpdateOne {
	uuo.mutation.SetPassportNumber(s)
	return uuo
}

// SetNillablePassportNumber sets the "passport_number" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassportNumber(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassportNumber(*s)
	}
	return uuo
}

// ClearPassportNumber clears the value of the "passport_number" field.
func (uuo *UserUpdateOne) ClearPassportNumber() *UserUpdateOne {
	uuo.mutation.ClearPassportNumber()
	return uuo
}

// SetPassportAuthority sets the "passport_authority" field.
func (uuo *UserUpdateOne) SetPassportAuthority(s string) *UserUpdateOne {
	uuo.mutation.SetPassportAuthority(s)
	return uuo
}

// SetNillablePassportAuthority sets the "passport_authority" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassportAuthority(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassportAuthority(*s)
	}
	return uuo
}

// ClearPassportAuthority clears the value of the "passport_authority" field.
func (uuo *UserUpdateOne) ClearPassportAuthority() *UserUpdateOne {
	uuo.mutation.ClearPassportAuthority()
	return uuo
}

// SetPassportIssueDate sets the "passport_issue_date" field.
func (uuo *UserUpdateOne) SetPassportIssueDate(t time.Time) *UserUpdateOne {
	uuo.mutation.SetPassportIssueDate(t)
	return uuo
}

// SetNillablePassportIssueDate sets the "passport_issue_date" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassportIssueDate(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetPassportIssueDate(*t)
	}
	return uuo
}

// ClearPassportIssueDate clears the value of the "passport_issue_date" field.
func (uuo *UserUpdateOne) ClearPassportIssueDate() *UserUpdateOne {
	uuo.mutation.ClearPassportIssueDate()
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetIsBlocked sets the "is_blocked" field.
func (uuo *UserUpdateOne) SetIsBlocked(b bool) *UserUpdateOne {
	uuo.mutation.SetIsBlocked(b)
	return uuo
}

// SetNillableIsBlocked sets the "is_blocked" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsBlocked(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsBlocked(*b)
	}
	return uuo
}

// SetType sets the "type" field.
func (uuo *UserUpdateOne) SetType(u user.Type) *UserUpdateOne {
	uuo.mutation.SetType(u)
	return uuo
}

// SetOrgName sets the "org_name" field.
func (uuo *UserUpdateOne) SetOrgName(s string) *UserUpdateOne {
	uuo.mutation.SetOrgName(s)
	return uuo
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOrgName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOrgName(*s)
	}
	return uuo
}

// ClearOrgName clears the value of the "org_name" field.
func (uuo *UserUpdateOne) ClearOrgName() *UserUpdateOne {
	uuo.mutation.ClearOrgName()
	return uuo
}

// SetWebsite sets the "website" field.
func (uuo *UserUpdateOne) SetWebsite(s string) *UserUpdateOne {
	uuo.mutation.SetWebsite(s)
	return uuo
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWebsite(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetWebsite(*s)
	}
	return uuo
}

// ClearWebsite clears the value of the "website" field.
func (uuo *UserUpdateOne) ClearWebsite() *UserUpdateOne {
	uuo.mutation.ClearWebsite()
	return uuo
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddGroupIDs(ids...)
	return uuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uuo *UserUpdateOne) SetRoleID(id int) *UserUpdateOne {
	uuo.mutation.SetRoleID(id)
	return uuo
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetRoleID(*id)
	}
	return uuo
}

// SetRole sets the "role" edge to the Role entity.
func (uuo *UserUpdateOne) SetRole(r *Role) *UserUpdateOne {
	return uuo.SetRoleID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearGroups() *UserUpdateOne {
	uuo.mutation.ClearGroups()
	return uuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveGroupIDs(ids...)
	return uuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveGroups(g ...*Group) *UserUpdateOne {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupIDs(ids...)
}

// ClearRole clears the "role" edge to the Role entity.
func (uuo *UserUpdateOne) ClearRole() *UserUpdateOne {
	uuo.mutation.ClearRole()
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Login(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Surname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSurname,
		})
	}
	if uuo.mutation.SurnameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldSurname,
		})
	}
	if value, ok := uuo.mutation.Patronymic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPatronymic,
		})
	}
	if uuo.mutation.PatronymicCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPatronymic,
		})
	}
	if value, ok := uuo.mutation.PassportSeries(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportSeries,
		})
	}
	if uuo.mutation.PassportSeriesCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportSeries,
		})
	}
	if value, ok := uuo.mutation.PassportNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportNumber,
		})
	}
	if uuo.mutation.PassportNumberCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportNumber,
		})
	}
	if value, ok := uuo.mutation.PassportAuthority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportAuthority,
		})
	}
	if uuo.mutation.PassportAuthorityCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPassportAuthority,
		})
	}
	if value, ok := uuo.mutation.PassportIssueDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPassportIssueDate,
		})
	}
	if uuo.mutation.PassportIssueDateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: user.FieldPassportIssueDate,
		})
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if uuo.mutation.PhoneCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.IsBlocked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsBlocked,
		})
	}
	if value, ok := uuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldType,
		})
	}
	if value, ok := uuo.mutation.OrgName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldOrgName,
		})
	}
	if uuo.mutation.OrgNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldOrgName,
		})
	}
	if value, ok := uuo.mutation.Website(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldWebsite,
		})
	}
	if uuo.mutation.WebsiteCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: user.FieldWebsite,
		})
	}
	if uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
