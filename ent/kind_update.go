// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/equipment"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/kind"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/predicate"
)

// KindUpdate is the builder for updating Kind entities.
type KindUpdate struct {
	config
	hooks    []Hook
	mutation *KindMutation
}

// Where appends a list predicates to the KindUpdate builder.
func (ku *KindUpdate) Where(ps ...predicate.Kind) *KindUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetName sets the "name" field.
func (ku *KindUpdate) SetName(s string) *KindUpdate {
	ku.mutation.SetName(s)
	return ku
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ku *KindUpdate) SetNillableName(s *string) *KindUpdate {
	if s != nil {
		ku.SetName(*s)
	}
	return ku
}

// SetMaxReservationTime sets the "max_reservation_time" field.
func (ku *KindUpdate) SetMaxReservationTime(i int64) *KindUpdate {
	ku.mutation.ResetMaxReservationTime()
	ku.mutation.SetMaxReservationTime(i)
	return ku
}

// SetNillableMaxReservationTime sets the "max_reservation_time" field if the given value is not nil.
func (ku *KindUpdate) SetNillableMaxReservationTime(i *int64) *KindUpdate {
	if i != nil {
		ku.SetMaxReservationTime(*i)
	}
	return ku
}

// AddMaxReservationTime adds i to the "max_reservation_time" field.
func (ku *KindUpdate) AddMaxReservationTime(i int64) *KindUpdate {
	ku.mutation.AddMaxReservationTime(i)
	return ku
}

// SetMaxReservationUnits sets the "max_reservation_units" field.
func (ku *KindUpdate) SetMaxReservationUnits(i int64) *KindUpdate {
	ku.mutation.ResetMaxReservationUnits()
	ku.mutation.SetMaxReservationUnits(i)
	return ku
}

// SetNillableMaxReservationUnits sets the "max_reservation_units" field if the given value is not nil.
func (ku *KindUpdate) SetNillableMaxReservationUnits(i *int64) *KindUpdate {
	if i != nil {
		ku.SetMaxReservationUnits(*i)
	}
	return ku
}

// AddMaxReservationUnits adds i to the "max_reservation_units" field.
func (ku *KindUpdate) AddMaxReservationUnits(i int64) *KindUpdate {
	ku.mutation.AddMaxReservationUnits(i)
	return ku
}

// AddEquipmentIDs adds the "equipments" edge to the Equipment entity by IDs.
func (ku *KindUpdate) AddEquipmentIDs(ids ...int) *KindUpdate {
	ku.mutation.AddEquipmentIDs(ids...)
	return ku
}

// AddEquipments adds the "equipments" edges to the Equipment entity.
func (ku *KindUpdate) AddEquipments(e ...*Equipment) *KindUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ku.AddEquipmentIDs(ids...)
}

// Mutation returns the KindMutation object of the builder.
func (ku *KindUpdate) Mutation() *KindMutation {
	return ku.mutation
}

// ClearEquipments clears all "equipments" edges to the Equipment entity.
func (ku *KindUpdate) ClearEquipments() *KindUpdate {
	ku.mutation.ClearEquipments()
	return ku
}

// RemoveEquipmentIDs removes the "equipments" edge to Equipment entities by IDs.
func (ku *KindUpdate) RemoveEquipmentIDs(ids ...int) *KindUpdate {
	ku.mutation.RemoveEquipmentIDs(ids...)
	return ku
}

// RemoveEquipments removes "equipments" edges to Equipment entities.
func (ku *KindUpdate) RemoveEquipments(e ...*Equipment) *KindUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ku.RemoveEquipmentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KindUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ku.hooks) == 0 {
		affected, err = ku.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KindMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ku.mutation = mutation
			affected, err = ku.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ku.hooks) - 1; i >= 0; i-- {
			if ku.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ku.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ku.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KindUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KindUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KindUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ku *KindUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kind.Table,
			Columns: kind.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kind.FieldID,
			},
		},
	}
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kind.FieldName,
		})
	}
	if value, ok := ku.mutation.MaxReservationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationTime,
		})
	}
	if value, ok := ku.mutation.AddedMaxReservationTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationTime,
		})
	}
	if value, ok := ku.mutation.MaxReservationUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationUnits,
		})
	}
	if value, ok := ku.mutation.AddedMaxReservationUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationUnits,
		})
	}
	if ku.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.RemovedEquipmentsIDs(); len(nodes) > 0 && !ku.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// KindUpdateOne is the builder for updating a single Kind entity.
type KindUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KindMutation
}

// SetName sets the "name" field.
func (kuo *KindUpdateOne) SetName(s string) *KindUpdateOne {
	kuo.mutation.SetName(s)
	return kuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (kuo *KindUpdateOne) SetNillableName(s *string) *KindUpdateOne {
	if s != nil {
		kuo.SetName(*s)
	}
	return kuo
}

// SetMaxReservationTime sets the "max_reservation_time" field.
func (kuo *KindUpdateOne) SetMaxReservationTime(i int64) *KindUpdateOne {
	kuo.mutation.ResetMaxReservationTime()
	kuo.mutation.SetMaxReservationTime(i)
	return kuo
}

// SetNillableMaxReservationTime sets the "max_reservation_time" field if the given value is not nil.
func (kuo *KindUpdateOne) SetNillableMaxReservationTime(i *int64) *KindUpdateOne {
	if i != nil {
		kuo.SetMaxReservationTime(*i)
	}
	return kuo
}

// AddMaxReservationTime adds i to the "max_reservation_time" field.
func (kuo *KindUpdateOne) AddMaxReservationTime(i int64) *KindUpdateOne {
	kuo.mutation.AddMaxReservationTime(i)
	return kuo
}

// SetMaxReservationUnits sets the "max_reservation_units" field.
func (kuo *KindUpdateOne) SetMaxReservationUnits(i int64) *KindUpdateOne {
	kuo.mutation.ResetMaxReservationUnits()
	kuo.mutation.SetMaxReservationUnits(i)
	return kuo
}

// SetNillableMaxReservationUnits sets the "max_reservation_units" field if the given value is not nil.
func (kuo *KindUpdateOne) SetNillableMaxReservationUnits(i *int64) *KindUpdateOne {
	if i != nil {
		kuo.SetMaxReservationUnits(*i)
	}
	return kuo
}

// AddMaxReservationUnits adds i to the "max_reservation_units" field.
func (kuo *KindUpdateOne) AddMaxReservationUnits(i int64) *KindUpdateOne {
	kuo.mutation.AddMaxReservationUnits(i)
	return kuo
}

// AddEquipmentIDs adds the "equipments" edge to the Equipment entity by IDs.
func (kuo *KindUpdateOne) AddEquipmentIDs(ids ...int) *KindUpdateOne {
	kuo.mutation.AddEquipmentIDs(ids...)
	return kuo
}

// AddEquipments adds the "equipments" edges to the Equipment entity.
func (kuo *KindUpdateOne) AddEquipments(e ...*Equipment) *KindUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return kuo.AddEquipmentIDs(ids...)
}

// Mutation returns the KindMutation object of the builder.
func (kuo *KindUpdateOne) Mutation() *KindMutation {
	return kuo.mutation
}

// ClearEquipments clears all "equipments" edges to the Equipment entity.
func (kuo *KindUpdateOne) ClearEquipments() *KindUpdateOne {
	kuo.mutation.ClearEquipments()
	return kuo
}

// RemoveEquipmentIDs removes the "equipments" edge to Equipment entities by IDs.
func (kuo *KindUpdateOne) RemoveEquipmentIDs(ids ...int) *KindUpdateOne {
	kuo.mutation.RemoveEquipmentIDs(ids...)
	return kuo
}

// RemoveEquipments removes "equipments" edges to Equipment entities.
func (kuo *KindUpdateOne) RemoveEquipments(e ...*Equipment) *KindUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return kuo.RemoveEquipmentIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KindUpdateOne) Select(field string, fields ...string) *KindUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Kind entity.
func (kuo *KindUpdateOne) Save(ctx context.Context) (*Kind, error) {
	var (
		err  error
		node *Kind
	)
	if len(kuo.hooks) == 0 {
		node, err = kuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*KindMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			kuo.mutation = mutation
			node, err = kuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(kuo.hooks) - 1; i >= 0; i-- {
			if kuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = kuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, kuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KindUpdateOne) SaveX(ctx context.Context) *Kind {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KindUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KindUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (kuo *KindUpdateOne) sqlSave(ctx context.Context) (_node *Kind, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   kind.Table,
			Columns: kind.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: kind.FieldID,
			},
		},
	}
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Kind.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kind.FieldID)
		for _, f := range fields {
			if !kind.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kind.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: kind.FieldName,
		})
	}
	if value, ok := kuo.mutation.MaxReservationTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationTime,
		})
	}
	if value, ok := kuo.mutation.AddedMaxReservationTime(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationTime,
		})
	}
	if value, ok := kuo.mutation.MaxReservationUnits(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationUnits,
		})
	}
	if value, ok := kuo.mutation.AddedMaxReservationUnits(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: kind.FieldMaxReservationUnits,
		})
	}
	if kuo.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.RemovedEquipmentsIDs(); len(nodes) > 0 && !kuo.mutation.EquipmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.EquipmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   kind.EquipmentsTable,
			Columns: []string{kind.EquipmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: equipment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Kind{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kind.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
