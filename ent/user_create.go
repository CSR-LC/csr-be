// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/group"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/role"
	"git.epam.com/epm-lstr/epm-lstr-lc/be/ent/user"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetLogin sets the "login" field.
func (uc *UserCreate) SetLogin(s string) *UserCreate {
	uc.mutation.SetLogin(s)
	return uc
}

// SetEmail sets the "email" field.
func (uc *UserCreate) SetEmail(s string) *UserCreate {
	uc.mutation.SetEmail(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UserCreate) SetPassword(s string) *UserCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetName sets the "name" field.
func (uc *UserCreate) SetName(s string) *UserCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uc *UserCreate) SetNillableName(s *string) *UserCreate {
	if s != nil {
		uc.SetName(*s)
	}
	return uc
}

// SetSurname sets the "surname" field.
func (uc *UserCreate) SetSurname(s string) *UserCreate {
	uc.mutation.SetSurname(s)
	return uc
}

// SetNillableSurname sets the "surname" field if the given value is not nil.
func (uc *UserCreate) SetNillableSurname(s *string) *UserCreate {
	if s != nil {
		uc.SetSurname(*s)
	}
	return uc
}

// SetPatronymic sets the "patronymic" field.
func (uc *UserCreate) SetPatronymic(s string) *UserCreate {
	uc.mutation.SetPatronymic(s)
	return uc
}

// SetNillablePatronymic sets the "patronymic" field if the given value is not nil.
func (uc *UserCreate) SetNillablePatronymic(s *string) *UserCreate {
	if s != nil {
		uc.SetPatronymic(*s)
	}
	return uc
}

// SetPassportSeries sets the "passport_series" field.
func (uc *UserCreate) SetPassportSeries(s string) *UserCreate {
	uc.mutation.SetPassportSeries(s)
	return uc
}

// SetNillablePassportSeries sets the "passport_series" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassportSeries(s *string) *UserCreate {
	if s != nil {
		uc.SetPassportSeries(*s)
	}
	return uc
}

// SetPassportNumber sets the "passport_number" field.
func (uc *UserCreate) SetPassportNumber(s string) *UserCreate {
	uc.mutation.SetPassportNumber(s)
	return uc
}

// SetNillablePassportNumber sets the "passport_number" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassportNumber(s *string) *UserCreate {
	if s != nil {
		uc.SetPassportNumber(*s)
	}
	return uc
}

// SetPassportAuthority sets the "passport_authority" field.
func (uc *UserCreate) SetPassportAuthority(s string) *UserCreate {
	uc.mutation.SetPassportAuthority(s)
	return uc
}

// SetNillablePassportAuthority sets the "passport_authority" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassportAuthority(s *string) *UserCreate {
	if s != nil {
		uc.SetPassportAuthority(*s)
	}
	return uc
}

// SetPassportIssueDate sets the "passport_issue_date" field.
func (uc *UserCreate) SetPassportIssueDate(t time.Time) *UserCreate {
	uc.mutation.SetPassportIssueDate(t)
	return uc
}

// SetNillablePassportIssueDate sets the "passport_issue_date" field if the given value is not nil.
func (uc *UserCreate) SetNillablePassportIssueDate(t *time.Time) *UserCreate {
	if t != nil {
		uc.SetPassportIssueDate(*t)
	}
	return uc
}

// SetPhone sets the "phone" field.
func (uc *UserCreate) SetPhone(s string) *UserCreate {
	uc.mutation.SetPhone(s)
	return uc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uc *UserCreate) SetNillablePhone(s *string) *UserCreate {
	if s != nil {
		uc.SetPhone(*s)
	}
	return uc
}

// SetIsBlocked sets the "is_blocked" field.
func (uc *UserCreate) SetIsBlocked(b bool) *UserCreate {
	uc.mutation.SetIsBlocked(b)
	return uc
}

// SetNillableIsBlocked sets the "is_blocked" field if the given value is not nil.
func (uc *UserCreate) SetNillableIsBlocked(b *bool) *UserCreate {
	if b != nil {
		uc.SetIsBlocked(*b)
	}
	return uc
}

// SetType sets the "type" field.
func (uc *UserCreate) SetType(u user.Type) *UserCreate {
	uc.mutation.SetType(u)
	return uc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (uc *UserCreate) SetNillableType(u *user.Type) *UserCreate {
	if u != nil {
		uc.SetType(*u)
	}
	return uc
}

// SetOrgName sets the "org_name" field.
func (uc *UserCreate) SetOrgName(s string) *UserCreate {
	uc.mutation.SetOrgName(s)
	return uc
}

// SetNillableOrgName sets the "org_name" field if the given value is not nil.
func (uc *UserCreate) SetNillableOrgName(s *string) *UserCreate {
	if s != nil {
		uc.SetOrgName(*s)
	}
	return uc
}

// SetWebsite sets the "website" field.
func (uc *UserCreate) SetWebsite(s string) *UserCreate {
	uc.mutation.SetWebsite(s)
	return uc
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (uc *UserCreate) SetNillableWebsite(s *string) *UserCreate {
	if s != nil {
		uc.SetWebsite(*s)
	}
	return uc
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uc *UserCreate) AddGroupIDs(ids ...int) *UserCreate {
	uc.mutation.AddGroupIDs(ids...)
	return uc
}

// AddGroups adds the "groups" edges to the Group entity.
func (uc *UserCreate) AddGroups(g ...*Group) *UserCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uc.AddGroupIDs(ids...)
}

// SetRoleID sets the "role" edge to the Role entity by ID.
func (uc *UserCreate) SetRoleID(id int) *UserCreate {
	uc.mutation.SetRoleID(id)
	return uc
}

// SetNillableRoleID sets the "role" edge to the Role entity by ID if the given value is not nil.
func (uc *UserCreate) SetNillableRoleID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetRoleID(*id)
	}
	return uc
}

// SetRole sets the "role" edge to the Role entity.
func (uc *UserCreate) SetRole(r *Role) *UserCreate {
	return uc.SetRoleID(r.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uc.defaults()
	if len(uc.hooks) == 0 {
		if err = uc.check(); err != nil {
			return nil, err
		}
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uc.check(); err != nil {
				return nil, err
			}
			uc.mutation = mutation
			if node, err = uc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			if uc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UserCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UserCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UserCreate) defaults() {
	if _, ok := uc.mutation.Name(); !ok {
		v := user.DefaultName
		uc.mutation.SetName(v)
	}
	if _, ok := uc.mutation.IsBlocked(); !ok {
		v := user.DefaultIsBlocked
		uc.mutation.SetIsBlocked(v)
	}
	if _, ok := uc.mutation.GetType(); !ok {
		v := user.DefaultType
		uc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UserCreate) check() error {
	if _, ok := uc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`ent: missing required field "User.login"`)}
	}
	if _, ok := uc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "User.email"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "User.password"`)}
	}
	if _, ok := uc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "User.name"`)}
	}
	if _, ok := uc.mutation.IsBlocked(); !ok {
		return &ValidationError{Name: "is_blocked", err: errors.New(`ent: missing required field "User.is_blocked"`)}
	}
	if _, ok := uc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "User.type"`)}
	}
	if v, ok := uc.mutation.GetType(); ok {
		if err := user.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "User.type": %w`, err)}
		}
	}
	return nil
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Login(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLogin,
		})
		_node.Login = value
	}
	if value, ok := uc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
		_node.Password = value
	}
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
		_node.Name = value
	}
	if value, ok := uc.mutation.Surname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldSurname,
		})
		_node.Surname = &value
	}
	if value, ok := uc.mutation.Patronymic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPatronymic,
		})
		_node.Patronymic = &value
	}
	if value, ok := uc.mutation.PassportSeries(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportSeries,
		})
		_node.PassportSeries = &value
	}
	if value, ok := uc.mutation.PassportNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportNumber,
		})
		_node.PassportNumber = &value
	}
	if value, ok := uc.mutation.PassportAuthority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassportAuthority,
		})
		_node.PassportAuthority = &value
	}
	if value, ok := uc.mutation.PassportIssueDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldPassportIssueDate,
		})
		_node.PassportIssueDate = value
	}
	if value, ok := uc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPhone,
		})
		_node.Phone = &value
	}
	if value, ok := uc.mutation.IsBlocked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldIsBlocked,
		})
		_node.IsBlocked = value
	}
	if value, ok := uc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldType,
		})
		_node.Type = value
	}
	if value, ok := uc.mutation.OrgName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldOrgName,
		})
		_node.OrgName = &value
	}
	if value, ok := uc.mutation.Website(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldWebsite,
		})
		_node.Website = &value
	}
	if nodes := uc.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: group.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.RoleTable,
			Columns: []string{user.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: role.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.role_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (ucb *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*User, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UserCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}
