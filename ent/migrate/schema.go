// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ActiveAreasColumns holds the columns for the "active_areas" table.
	ActiveAreasColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// ActiveAreasTable holds the schema information for the "active_areas" table.
	ActiveAreasTable = &schema.Table{
		Name:       "active_areas",
		Columns:    ActiveAreasColumns,
		PrimaryKey: []*schema.Column{ActiveAreasColumns[0]},
	}
	// EquipmentColumns holds the columns for the "equipment" table.
	EquipmentColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "sku", Type: field.TypeString, Default: "unknown"},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
		{Name: "rate_hour", Type: field.TypeInt64},
		{Name: "rate_day", Type: field.TypeInt64},
		{Name: "description", Type: field.TypeString, Default: "unknown"},
		{Name: "kind_equipments", Type: field.TypeInt, Nullable: true},
		{Name: "statuses_equipments", Type: field.TypeInt, Nullable: true},
	}
	// EquipmentTable holds the schema information for the "equipment" table.
	EquipmentTable = &schema.Table{
		Name:       "equipment",
		Columns:    EquipmentColumns,
		PrimaryKey: []*schema.Column{EquipmentColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "equipment_kinds_equipments",
				Columns:    []*schema.Column{EquipmentColumns[6]},
				RefColumns: []*schema.Column{KindsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "equipment_statuses_equipments",
				Columns:    []*schema.Column{EquipmentColumns[7]},
				RefColumns: []*schema.Column{StatusesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupsColumns holds the columns for the "groups" table.
	GroupsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
	}
	// GroupsTable holds the schema information for the "groups" table.
	GroupsTable = &schema.Table{
		Name:       "groups",
		Columns:    GroupsColumns,
		PrimaryKey: []*schema.Column{GroupsColumns[0]},
	}
	// KindsColumns holds the columns for the "kinds" table.
	KindsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
		{Name: "max_reservation_time", Type: field.TypeInt64, Default: 120000000},
		{Name: "max_reservation_units", Type: field.TypeInt64, Default: 10},
	}
	// KindsTable holds the schema information for the "kinds" table.
	KindsTable = &schema.Table{
		Name:       "kinds",
		Columns:    KindsColumns,
		PrimaryKey: []*schema.Column{KindsColumns[0]},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
	}
	// RolesColumns holds the columns for the "roles" table.
	RolesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "slug", Type: field.TypeString, Unique: true},
	}
	// RolesTable holds the schema information for the "roles" table.
	RolesTable = &schema.Table{
		Name:       "roles",
		Columns:    RolesColumns,
		PrimaryKey: []*schema.Column{RolesColumns[0]},
	}
	// StatusesColumns holds the columns for the "statuses" table.
	StatusesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// StatusesTable holds the schema information for the "statuses" table.
	StatusesTable = &schema.Table{
		Name:       "statuses",
		Columns:    StatusesColumns,
		PrimaryKey: []*schema.Column{StatusesColumns[0]},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "login", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "name", Type: field.TypeString, Default: "unknown"},
		{Name: "surname", Type: field.TypeString, Nullable: true},
		{Name: "patronymic", Type: field.TypeString, Nullable: true},
		{Name: "passport_series", Type: field.TypeString, Nullable: true},
		{Name: "passport_number", Type: field.TypeString, Nullable: true},
		{Name: "passport_authority", Type: field.TypeString, Nullable: true},
		{Name: "passport_issue_date", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"postgres": "timestamp"}},
		{Name: "phone", Type: field.TypeString, Nullable: true},
		{Name: "is_blocked", Type: field.TypeBool, Default: false},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"person", "organization"}, Default: "person"},
		{Name: "org_name", Type: field.TypeString, Nullable: true},
		{Name: "website", Type: field.TypeString, Nullable: true},
		{Name: "active_area_users", Type: field.TypeInt, Nullable: true},
		{Name: "role_users", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_active_areas_users",
				Columns:    []*schema.Column{UsersColumns[16]},
				RefColumns: []*schema.Column{ActiveAreasColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "users_roles_users",
				Columns:    []*schema.Column{UsersColumns[17]},
				RefColumns: []*schema.Column{RolesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// GroupUsersColumns holds the columns for the "group_users" table.
	GroupUsersColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "user_id", Type: field.TypeInt},
	}
	// GroupUsersTable holds the schema information for the "group_users" table.
	GroupUsersTable = &schema.Table{
		Name:       "group_users",
		Columns:    GroupUsersColumns,
		PrimaryKey: []*schema.Column{GroupUsersColumns[0], GroupUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_users_group_id",
				Columns:    []*schema.Column{GroupUsersColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_users_user_id",
				Columns:    []*schema.Column{GroupUsersColumns[1]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// GroupPermissionsColumns holds the columns for the "group_permissions" table.
	GroupPermissionsColumns = []*schema.Column{
		{Name: "group_id", Type: field.TypeInt},
		{Name: "permission_id", Type: field.TypeInt},
	}
	// GroupPermissionsTable holds the schema information for the "group_permissions" table.
	GroupPermissionsTable = &schema.Table{
		Name:       "group_permissions",
		Columns:    GroupPermissionsColumns,
		PrimaryKey: []*schema.Column{GroupPermissionsColumns[0], GroupPermissionsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "group_permissions_group_id",
				Columns:    []*schema.Column{GroupPermissionsColumns[0]},
				RefColumns: []*schema.Column{GroupsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "group_permissions_permission_id",
				Columns:    []*schema.Column{GroupPermissionsColumns[1]},
				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ActiveAreasTable,
		EquipmentTable,
		GroupsTable,
		KindsTable,
		PermissionsTable,
		RolesTable,
		StatusesTable,
		UsersTable,
		GroupUsersTable,
		GroupPermissionsTable,
	}
)

func init() {
	EquipmentTable.ForeignKeys[0].RefTable = KindsTable
	EquipmentTable.ForeignKeys[1].RefTable = StatusesTable
	UsersTable.ForeignKeys[0].RefTable = ActiveAreasTable
	UsersTable.ForeignKeys[1].RefTable = RolesTable
	GroupUsersTable.ForeignKeys[0].RefTable = GroupsTable
	GroupUsersTable.ForeignKeys[1].RefTable = UsersTable
	GroupPermissionsTable.ForeignKeys[0].RefTable = GroupsTable
	GroupPermissionsTable.ForeignKeys[1].RefTable = PermissionsTable
}
