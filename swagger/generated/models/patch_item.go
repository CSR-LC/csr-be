// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchItem A JSONPatch document as defined by RFC 6902
//
// swagger:model PatchItem
type PatchItem struct {

	// A string containing a JSON Pointer value
	From string `json:"from,omitempty"`

	// The operation to be performed
	// Required: true
	// Enum: [add remove replace move copy test]
	Op *string `json:"op"`

	// A JSON-Pointer
	// Required: true
	Path *string `json:"path"`

	// The value to be used within the operations
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this patch item
func (m *PatchItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchItemTypeOpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["add","remove","replace","move","copy","test"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchItemTypeOpPropEnum = append(patchItemTypeOpPropEnum, v)
	}
}

const (

	// PatchItemOpAdd captures enum value "add"
	PatchItemOpAdd string = "add"

	// PatchItemOpRemove captures enum value "remove"
	PatchItemOpRemove string = "remove"

	// PatchItemOpReplace captures enum value "replace"
	PatchItemOpReplace string = "replace"

	// PatchItemOpMove captures enum value "move"
	PatchItemOpMove string = "move"

	// PatchItemOpCopy captures enum value "copy"
	PatchItemOpCopy string = "copy"

	// PatchItemOpTest captures enum value "test"
	PatchItemOpTest string = "test"
)

// prop value enum
func (m *PatchItem) validateOpEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchItemTypeOpPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchItem) validateOp(formats strfmt.Registry) error {

	if err := validate.Required("op", "body", m.Op); err != nil {
		return err
	}

	// value enum
	if err := m.validateOpEnum("op", "body", *m.Op); err != nil {
		return err
	}

	return nil
}

func (m *PatchItem) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch item based on context it is used
func (m *PatchItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchItem) UnmarshalBinary(b []byte) error {
	var res PatchItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
