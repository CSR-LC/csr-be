// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetUserByID get user by Id
//
// swagger:model GetUserById
type GetUserByID struct {

	// email
	// Required: true
	Email *string `json:"email"`

	// id
	// Required: true
	ID *int64 `json:"id"`

	// is blocked
	// Example: false
	// Required: true
	IsBlocked *bool `json:"is_blocked"`

	// login
	// Required: true
	Login *string `json:"login"`

	// name
	// Required: true
	Name *string `json:"name"`

	// org name
	// Required: true
	OrgName *string `json:"org_name"`

	// passport authority
	// Required: true
	PassportAuthority *string `json:"passport_authority"`

	// passport issue date
	// Required: true
	PassportIssueDate *string `json:"passport_issue_date"`

	// passport number
	// Required: true
	PassportNumber *string `json:"passport_number"`

	// passport series
	// Required: true
	PassportSeries *string `json:"passport_series"`

	// patronomic
	// Required: true
	Patronomic *string `json:"patronomic"`

	// phone number
	// Required: true
	PhoneNumber *string `json:"phone_number"`

	// role
	// Required: true
	Role *GetUserByIDRole `json:"role"`

	// surname
	// Required: true
	Surname *string `json:"surname"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this get user by Id
func (m *GetUserByID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBlocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrgName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassportAuthority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassportIssueDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassportNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassportSeries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePatronomic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSurname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUserByID) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateIsBlocked(formats strfmt.Registry) error {

	if err := validate.Required("is_blocked", "body", m.IsBlocked); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateOrgName(formats strfmt.Registry) error {

	if err := validate.Required("org_name", "body", m.OrgName); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePassportAuthority(formats strfmt.Registry) error {

	if err := validate.Required("passport_authority", "body", m.PassportAuthority); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePassportIssueDate(formats strfmt.Registry) error {

	if err := validate.Required("passport_issue_date", "body", m.PassportIssueDate); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePassportNumber(formats strfmt.Registry) error {

	if err := validate.Required("passport_number", "body", m.PassportNumber); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePassportSeries(formats strfmt.Registry) error {

	if err := validate.Required("passport_series", "body", m.PassportSeries); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePatronomic(formats strfmt.Registry) error {

	if err := validate.Required("patronomic", "body", m.Patronomic); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phone_number", "body", m.PhoneNumber); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *GetUserByID) validateSurname(formats strfmt.Registry) error {

	if err := validate.Required("surname", "body", m.Surname); err != nil {
		return err
	}

	return nil
}

func (m *GetUserByID) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get user by Id based on the context it is used
func (m *GetUserByID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetUserByID) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {
		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetUserByID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetUserByID) UnmarshalBinary(b []byte) error {
	var res GetUserByID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetUserByIDRole get user by ID role
//
// swagger:model GetUserByIDRole
type GetUserByIDRole struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this get user by ID role
func (m *GetUserByIDRole) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get user by ID role based on context it is used
func (m *GetUserByIDRole) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetUserByIDRole) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetUserByIDRole) UnmarshalBinary(b []byte) error {
	var res GetUserByIDRole
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
