// Code generated by go-swagger; DO NOT EDIT.

package equipment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetEquipmentHandlerFunc turns a function with the right signature into a get equipment handler
type GetEquipmentHandlerFunc func(GetEquipmentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetEquipmentHandlerFunc) Handle(params GetEquipmentParams) middleware.Responder {
	return fn(params)
}

// GetEquipmentHandler interface for that can handle valid get equipment params
type GetEquipmentHandler interface {
	Handle(GetEquipmentParams) middleware.Responder
}

// NewGetEquipment creates a new http.Handler for the get equipment operation
func NewGetEquipment(ctx *middleware.Context, handler GetEquipmentHandler) *GetEquipment {
	return &GetEquipment{Context: ctx, Handler: handler}
}

/* GetEquipment swagger:route GET /equipment/{equipmentId} Equipment getEquipment

Get equipment by id

*/
type GetEquipment struct {
	Context *middleware.Context
	Handler GetEquipmentHandler
}

func (o *GetEquipment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetEquipmentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
