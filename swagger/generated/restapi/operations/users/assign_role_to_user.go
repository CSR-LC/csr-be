// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// AssignRoleToUserHandlerFunc turns a function with the right signature into a assign role to user handler
type AssignRoleToUserHandlerFunc func(AssignRoleToUserParams) middleware.Responder

// Handle executing the request and returning a response
func (fn AssignRoleToUserHandlerFunc) Handle(params AssignRoleToUserParams) middleware.Responder {
	return fn(params)
}

// AssignRoleToUserHandler interface for that can handle valid assign role to user params
type AssignRoleToUserHandler interface {
	Handle(AssignRoleToUserParams) middleware.Responder
}

// NewAssignRoleToUser creates a new http.Handler for the assign role to user operation
func NewAssignRoleToUser(ctx *middleware.Context, handler AssignRoleToUserHandler) *AssignRoleToUser {
	return &AssignRoleToUser{Context: ctx, Handler: handler}
}

/* AssignRoleToUser swagger:route POST /v1/management/users/{userId}/role Users assignRoleToUser

Assign role to user

*/
type AssignRoleToUser struct {
	Context *middleware.Context
	Handler AssignRoleToUserHandler
}

func (o *AssignRoleToUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewAssignRoleToUserParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
