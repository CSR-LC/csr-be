// Code generated by go-swagger; DO NOT EDIT.

package kinds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PatchKindHandlerFunc turns a function with the right signature into a patch kind handler
type PatchKindHandlerFunc func(PatchKindParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchKindHandlerFunc) Handle(params PatchKindParams) middleware.Responder {
	return fn(params)
}

// PatchKindHandler interface for that can handle valid patch kind params
type PatchKindHandler interface {
	Handle(PatchKindParams) middleware.Responder
}

// NewPatchKind creates a new http.Handler for the patch kind operation
func NewPatchKind(ctx *middleware.Context, handler PatchKindHandler) *PatchKind {
	return &PatchKind{Context: ctx, Handler: handler}
}

/* PatchKind swagger:route PATCH /equipment/kinds/{kindId} Kinds patchKind

Edit equipment kind by id.

*/
type PatchKind struct {
	Context *middleware.Context
	Handler PatchKindHandler
}

func (o *PatchKind) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPatchKindParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
