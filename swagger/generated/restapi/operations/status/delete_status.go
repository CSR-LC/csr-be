// Code generated by go-swagger; DO NOT EDIT.

package status

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteStatusHandlerFunc turns a function with the right signature into a delete status handler
type DeleteStatusHandlerFunc func(DeleteStatusParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteStatusHandlerFunc) Handle(params DeleteStatusParams) middleware.Responder {
	return fn(params)
}

// DeleteStatusHandler interface for that can handle valid delete status params
type DeleteStatusHandler interface {
	Handle(DeleteStatusParams) middleware.Responder
}

// NewDeleteStatus creates a new http.Handler for the delete status operation
func NewDeleteStatus(ctx *middleware.Context, handler DeleteStatusHandler) *DeleteStatus {
	return &DeleteStatus{Context: ctx, Handler: handler}
}

/* DeleteStatus swagger:route DELETE /equipment/statuses/{statusId} Status deleteStatus

Delete status by id

*/
type DeleteStatus struct {
	Context *middleware.Context
	Handler DeleteStatusHandler
}

func (o *DeleteStatus) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteStatusParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
