swagger: "2.0"
info:
  version: "0.0.1"
  title: Be
  description: |
    The API provides CSR backend API.

basePath: /api/
schemes:
  - https
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
consumes:
  - application/json
produces:
  - application/json

paths:
  /v1/login:
    post:
      description: 'Returns token for authorized User'
      tags:
        - Users
      operationId: Login
      consumes:
        - "application/json"
      parameters:
        - name: 'login'
          in: 'body'
          required: true
          description: 'Login Payload'
          schema:
            $ref: '#/definitions/LoginInfo'
      responses:
        200:
          description: Successful login
          schema:
            $ref: '#/definitions/AccessToken'
        401:
          schema:
            type: string
          description: Unauthorized
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/refresh:
    post:
      description: 'Returns new access token for an authorized User'
      tags:
        - Users
      operationId: Refresh
      consumes:
        - "application/json"
      parameters:
        - name: 'Refresh token'
          in: 'body'
          required: true
          description: 'Refresh payload'
          schema:
            $ref: '#/definitions/RefreshToken'

      responses:
        200:
          description: Successful refresh.
          schema:
            $ref: '#/definitions/AccessToken'
        404:
          description: Refresh token not found.
          schema:
            $ref: "#/definitions/Error"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/users:
    post:
      summary: Register a new user.
      tags:
        - Users
      operationId: postUser
      parameters:
        - name: data
          in: body
          description: New user data.
          required: true
          schema:
            $ref: "#/definitions/UserRegister"
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/CreateUserResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/users/me:
    get:
      summary: Get the current user data.
      security:
        - Bearer: []
      tags:
        - Users
      operationId: getCurrentUser
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    patch:
      summary: Edit selected fields of the current user.
      security:
        - Bearer: []
      tags:
        - Users
      operationId: patchUser
      consumes:
        - application/json
      parameters:
        - name: userPatch
          in: body
          description: The patch to apply to the user.
          required: true
          schema:
            $ref: "#/definitions/PatchRequest"
      responses:
        204:
          description: Success
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /management/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        type: integer
    get:
      summary: Get user by ID
      tags:
        - Users
      operationId: GetUser
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/GetUserById"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /management/listUsers:
    get:
      summary: Get all users
      tags:
        - Users
      operationId: GetAllUsers
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/GetListUsers"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/roles:
    get:
      summary: List all roles.
      tags:
        - Roles
      operationId: GetRoles
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListRoles"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/management/users/{userId}/role:
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        type: integer
    post:
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - name: data
          in: body
          description: Role to assign to user.
          required: true
          schema:
            $ref: "#/definitions/AssignRoleToUser"
      summary: Assign role to user
      tags:
        - Users
      operationId: AssignRoleToUser
      responses:
        200:
          description: Role has been assigned to user
          schema:
            $ref: "#/definitions/GetUserResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"

  /v1/users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        type: integer
    post:
      consumes:
        - application/json
      parameters:
        - name: UpdateUserTask
          in: body
          description: Data to update.
          required: true
          schema:
            $ref: "#/definitions/UpdateUserTask"
      tags:
        - Users
      operationId: UserUpdate
      summary: Updates user information by its id.
      responses:
        200:
          description: User information has been updated.
          schema:
            $ref: "#/definitions/SuccessUserUpdateResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"


  /equipment/statuses:
    post:
      summary: Creating a new status.
      tags:
        - Status
      operationId: postStatus
      parameters:
        - name: name
          in: body
          description: Status Name
          required: true
          schema:
            $ref: "#/definitions/StatusName"
      responses:
        201:
          description: Status has been created
          schema:
            $ref: "#/definitions/SuccessStatusOperationResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: List all statuses.
      tags:
        - Status
      operationId: GetStatuses
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/ListStatuses"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment/statuses/{statusId}:
    parameters:
      - name: statusId
        in: path
        required: true
        description: status id
        type: string
    get:
      summary: Get status by id
      tags:
        - Status
      operationId: GetStatus
      responses:
        201:
          description: Status has been created
          schema:
            $ref: "#/definitions/SuccessStatusOperationResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete status by id
      tags:
        - Status
      operationId: DeleteStatus
      responses:
        201:
          description: Status has been created
          schema:
            $ref: "#/definitions/SuccessStatusOperationResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment/kinds:
    get:
      summary: Get all kinds.
      tags:
        - Kinds
      operationId: GetAllKinds
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListOfKinds"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    post:
      summary: Create a new kind.
      tags:
        - Kinds
      operationId: CreateNewKind
      parameters:
        - name: name
          in: body
          description: Name of a kind
          required: true
          schema:
            $ref: "#/definitions/CreateNewKind"
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/CreateNewKindResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment/kinds/{kindId}:
    parameters:
      - name: kindId
        in: path
        required: true
        description: kind id
        type: string
    get:
      summary: Get information about the kind of equipment by id.
      tags:
        - Kinds
      operationId: getKindByID
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/GetKindByIDResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete kind of equipment from db by id.
      tags:
        - Kinds
      operationId: deleteKind
      responses:
        201:
          description: kind of equipment successfully deleted from db
          schema:
            $ref: "#/definitions/DeleteKindResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    patch:
      summary: Edit equipment kind by id.
      tags:
        - Kinds
      operationId: PatchKind
      parameters:
        - name: patchTask
          in: body
          required: true
          schema:
            $ref: '#/definitions/PatchTask'
      responses:
        201:
          description: Success
          schema:
            $ref: "#/definitions/PatchKindResponse"
        default:
          description: Unexpected error
          schema:
            $ref: "#/definitions/Error"
  /v1/orders:
    get:
      tags:
        - Orders
      operationId: GetAllOrders
      security:
        - Bearer: [ ]
      responses:
        200:
          description: 'List of orders'
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/definitions/Order'
                  total:
                    type: integer
        default:
          description: 'Unexpected error'
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Orders
      operationId: CreateOrder
      security:
        - Bearer: [ ]
      consumes:
        - application/json
      responses:
        201:
          description: 'Order created'
          schema:
            $ref: '#/definitions/Order'
      parameters:
        - name: data
          in: body
          description: 'Create new order'
          required: true
          schema:
            $ref: '#/definitions/OrderCreateRequest'
  /v1/orders/{orderId}:
    put:
      summary: Edit order by id
      tags:
        - Orders
      security:
        - Bearer: [ ]
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          required: true
          description: order id
          type: integer
        - name: data
          in: body
          description: Edit order
          required: true
          schema:
            $ref: "#/definitions/OrderUpdateRequest"
      responses:
        200:
          description: Order updated
          schema:
            $ref: "#/definitions/Order"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/order_statuses/{orderId}:
    get:
      summary: Get full order status history.
      tags:
        - Orders
      security:
        - Bearer: [ ]
      parameters:
        - name: orderId
          in: path
          required: true
          description: order id
          type: integer
      operationId: GetFullOrderHistory
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/OrderStatuses"
        404:
          description: Order not found
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/order_statuses/:
    post:
      summary: Add new order status to order status history.
      tags:
        - Orders
      security:
        - Bearer: [ ]
      parameters:
        - name: data
          in: body
          description: 'Create new order status'
          required: true
          schema:
            $ref: '#/definitions/NewOrderStatus'
      operationId: AddNewOrderStatus
      responses:
        200:
          description: Order created
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /v1/orders/status/{status}:
    get:
      summary: Get orders by status.
      tags:
        - Orders
      security:
        - Bearer: [ ]
      parameters:
        - name: status
          in: path
          required: true
          description: order status
          type: string
      operationId: GetOrdersByStatus
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/OrderList"
        404:
          description: No orders found
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /v1/orders/from={fromDate}&to={toDate}&status={statusName}:
    get:
      summary: Get orders by date and status.
      tags:
        - Orders
      security:
        - Bearer: [ ]
      parameters:
        - name: fromDate
          in: path
          required: true
          type: string
          format: date
        - name: toDate
          in: path
          required: true
          type: string
          format: date
        - name: statusName
          in: path
          required: true
          type: string
      operationId: GetOrdersByDateAndStatus
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/OrderList"
        404:
          description: No orders found
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /v1/status_names:
    get:
      summary: Get all status names.
      tags:
        - Orders
      security:
        - Bearer: [ ]
      operationId: GetAllStatusNames
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/OrderStatusNames"
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
  /v1/active_areas:
    get:
      summary: Get all active areas.
      tags:
        - Active_Areas
      operationId: GetAllActiveAreas
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListOfActiveAreas"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment:
    post:
      summary: Register a new equipment
      tags:
        - Equipment
      operationId: CreateNewEquipment
      consumes:
        - application/json
      parameters:
        - name: newEquipment
          in: body
          description: Create a new equipment
          required: true
          schema:
            $ref: "#/definitions/Equipment"
      responses:
        201:
          description: Equipment created
          schema:
            $ref: "#/definitions/EquipmentResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: Get all equipment
      tags:
        - Equipment
      operationId: GetAllEquipment
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListEquipment"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment/{equipmentId}:
    parameters:
      - name: equipmentId
        in: path
        required: true
        description: equipment id
        type: integer
    get:
      summary: Get equipment by id
      tags:
        - Equipment
      operationId: GetEquipment
      responses:
        200:
          description: Equipment has been found
          schema:
            $ref: "#/definitions/EquipmentResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete equipment by id
      tags:
        - Equipment
      operationId: DeleteEquipment
      responses:
        200:
          description: Equipment has been deleted
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Edit equipment by id
      tags:
        - Equipment
      operationId: EditEquipment
      parameters:
        - name: EditEquipment
          in: body
          description: Edit an equipment
          required: false
          schema:
            $ref: "#/definitions/Equipment"
      responses:
        200:
          description: Equipment edited
          schema:
            $ref: "#/definitions/Equipment"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /equipment/search:
    post:
      summary: Equipment filtered list
      tags:
        - Equipment
      operationId: FindEquipment
      parameters:
        - name: FindEquipment
          in: body
          description: Filtered list of an equipment
          required: false
          schema:
            $ref: "#/definitions/EquipmentFilter"
      responses:
        200:
          description: Equipment has been found
          schema:
            $ref: "#/definitions/ListEquipment"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /pet_size:
    post:
      summary: Register a new pet size
      tags:
        - PetSize
      operationId: CreateNewPetSize
      consumes:
        - application/json
      parameters:
        - name: newPetSize
          in: body
          description: Create a new pet size
          required: true
          schema:
            $ref: "#/definitions/PetSize"
      responses:
        201:
          description: Pet size created
          schema:
            $ref: "#/definitions/PetSizeResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    get:
      summary: Get all pet size
      tags:
        - PetSize
      operationId: GetAllPetSize
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/ListOfPetSizes"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /pet_size/{petSizeId}:
    parameters:
      - name: petSizeId
        in: path
        required: true
        description: pet size id
        type: integer
    get:
      summary: Get pet size by id
      tags:
        - PetSize
      operationId: GetPetSize
      responses:
        200:
          description: Pet size has been found
          schema:
            $ref: "#/definitions/PetSizeResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    delete:
      summary: Delete pet size by id
      tags:
        - PetSize
      operationId: DeletePetSize
      responses:
        200:
          description: Pet size has been deleted
          schema:
            type: string
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
    put:
      summary: Edit pet size by id
      tags:
        - PetSize
      operationId: EditPetSize
      parameters:
        - name: EditPetSize
          in: body
          description: Edit an pet size
          required: true
          schema:
            $ref: "#/definitions/PetSize"
      responses:
        200:
          description: Pet size edited
          schema:
            $ref: "#/definitions/PetSizeResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/managment/users/{userId}/block:
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        type: integer 
    post: 
      summary: Block user
      tags:
        - Users
      operationId: blockUser
      responses:
        200:
          description: Success
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"
  /v1/managment/users/{userId}/unblock:
    parameters:
      - name: userId
        in: path
        required: true
        description: user id
        type: integer 
    post: 
      summary: Unblock user
      tags:
        - Users
      operationId: unblockUser
      responses:
        200:
          description: Success
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"  

  /password_reset/:
    post:
      summary: Create password reset link by login.
      tags:
        - Password_Reset
      operationId: SendLinkByLogin
      parameters:
        - name: login
          in: body
          required: true
          schema:
            $ref: "#/definitions/SendPasswordResetLinkRequest"
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/PasswordResetResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"

  /password_reset/{token}:
    get:
      summary: Get password reset link.
      tags:
        - Password_Reset
      operationId: GetPasswordResetLink
      parameters:
        - name: token
          in: path
          required: true
          type: string
      responses:
        200:
          description: Success
          schema:
            $ref: "#/definitions/PasswordResetResponse"
        default:
          description: Unexpected error.
          schema:
            $ref: "#/definitions/Error"

definitions:
  PetKind:
    type: object
    required:
      - id
    properties:
      id:
        type: integer
      name:
        type: string
  Error:
    type: object
    required:
      - data
    properties:
      data:
        type: object
        properties:
          correlationId:
            type: string
          message:
            type: string
  PatchTask:
    type: object
    required:
      - data
    description: Patch task object (adding max reservation time and max reservation units)
    properties:
      data:
        type: object
        properties:
          max_reservation_time:
            type: integer
            description: max reservation time field
          max_reservation_units:
            type: integer
            description: max reservation units field

  UpdateUserTask:
    type: object
    required:
      - data
    description: Update user object
    properties:
      data:
        type: object
        properties:
          name:
            type: string
            description: Name of user.
          surname:
            type: string
            description: Surname of user.
          patronymic:
            type: string
            description: Patronymyc data.
          passport_series:
            type: string
          passport_number:
            type: string
          passport_authority:
            type: string
          passport_issue_date:
            type: string
          phone_number:
            type: string
            description: Phone number.
          email:
            type: string
          type:
            type: string
          active_areas:
            type: array
            items:
              type: integer
          org_name:
            type: string
          vk:
            type: string

  PatchRequest:
    type: array
    items:
      $ref: "#/definitions/PatchItem"
  PatchItem:
    type: object
    description: A JSONPatch document as defined by RFC 6902
    required:
      - op
      - path
    properties:
      from:
        description: A string containing a JSON Pointer value
        type: string
      op:
        description: The operation to be performed
        enum:
          - add
          - remove
          - replace
          - move
          - copy
          - test
        type: string
      path:
        description: A JSON-Pointer
        type: string
      value:
        description: The value to be used within the operations
        type: object

  # User
  LoginInfo:
    type: object
    required:
      - login
      - password
    properties:
      login:
        type: string
      password:
        type: string
  AccessToken:
    type: object
    required:
      - accessToken
    properties:
     accessToken:
       type: string
  RefreshToken:
    type: object
    required:
      - refreshToken
    properties:
      refreshToken:
        type: string
  UserEmbeddable:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
      name:
        type: string
  User:
    type: object
    required:
      - id
      - createTime
      - roleId
      - login
    properties:
      id:
        type: integer
      login:
        type: string
      createTime:
        type: string
        format: date-time
      roleId:
        type: integer
      name:
        type: string
        description: Name of user.
      surname:
        type: string
        description: Surname of user.
      patronymic:
        type: string
        description: Patronymyc data.
      passport_series:
        type: string
      passport_number:
        type: string
      passport_authority:
        type: string
      passport_issue_date:
        type: string
      phone_number:
        type: string
        description: Phone number.
      email:
        type: string
      type:
        type: string
      active_areas:
        type: array
        items:
          type: integer
      org_name:
        type: string

  UserRegister:
    type: object
    required:
      - login
      - password
      - type
    properties:
      login:
        type: string
        minLength: 3
      password:
        type: string
        minLength: 6
      email:
        type: string
        format: email
      type:
        type: string
        enum:
          - person
          - organization
      name:
        type: string
      surname:
        type: string
      patronymic:
        type: string
      passport_series:
        type: string
      passport_number:
        type: string
      passport_authority:
        type: string
      passport_issue_date:
        type: string
        format: date
      phone_number:
        type: string
      org_name:
        type: string
      website:
        type: string
      vk:
        type: string
      active_areas:
        type: array
        items:
          type: integer
  CreateUserResponse:
    type: object
    required:
      - data
    properties:
      data:
        type: object
        required:
          - id
          - login
        properties:
          id:
            type: integer
          login:
            type: string
  GetUserResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/User"
  AssignRoleToUser:
    type: object
    required:
      - roleId
    properties:
      roleId:
        type: integer
  GetUserById:
    type: object
    required:
      - id
      - login
      - role
      - surname
      - name
      - patronymic
      - passport_series
      - passport_number
      - passport_authority
      - passport_issue_date
      - phone_number
      - email
      - is_blocked
      - type
      - org_name
    properties:
      id:
        type: integer
      login:
        type: string
      role:
        type: object
        properties:
          id:
            type: integer
          name:
            type: string
      surname:
        type: string
      name:
        type: string
      patronymic:
        type: string
      passport_series:
        type: string
      passport_number:
        type: string
      passport_authority:
        type: string
      passport_issue_date:
        type: string
      phone_number:
        type: string
      email:
        type: string
      is_blocked:
        type: boolean
        example: false
      type:
        type: string
      org_name:
        type: string

  GetListUsers:
    type: array
    items:
      $ref: "#/definitions/GetUserById"

  SuccessUserUpdateResponse:
   type: object
   required:
    - data
   properties:
    data:
      $ref: "#/definitions/User"
  #Role
  Role:
    type: object
    required:
      - id
      - name
      - slug
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
  ListRoles:
    type: array
    items:
      $ref: "#/definitions/Role"

  #Status
  Status:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
      name:
        type: string
  ListStatuses:
    type: array
    items:
      $ref: "#/definitions/Status"
  SuccessStatusOperationResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Status"
  StatusName:
    type: object
    required:
      - name
    properties:
      name:
        type: string
  # Kind
  Kind:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      max_reservation_time:
        type: integer
      max_reservation_units:
        type: integer
  ListOfKinds:
    type: array
    items:
      $ref: "#/definitions/Kind"
  GetKindByIDResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Kind"
  DeleteKindResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Kind"
  CreateNewKind:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Kind"
  CreateNewKindResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Kind"
  PatchKindResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/Kind"
  # PetSize
  PetSize:
    type: object
    required:
      - name
      - size
    properties:
      id:
        type: integer
      name:
        type: string
        example: "big"
      size:
        type: string
        example: "76x48x53"
  ListOfPetSizes:
    type: array
    items:
      $ref: "#/definitions/PetSize"
  PetSizeResponse:
    type: object
    required:
      - id
      - name
      - size
    properties:
      id:
        type: integer
      name:
        type: string
      size:
        type: string


  #Active Areas
  ActiveArea:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
      name:
        type: string
  ListOfActiveAreas:
    type: array
    items:
      $ref: "#/definitions/ActiveArea"

  # Equipment
  Equipment:
    type: object
    required:
      - category
      - name
      - title
      - kind
      - status
      - petSize
      - compensationСost
      - condition
      - inventoryNumber
      - supplier
      - receiptDate
      - maximumAmount
      - maximumDays
      - order
      - location
      - description
      - photo
    properties:
      category:
        type: string
        example: "Клетки"
      name:
        type: string
        example: "Dog harness 3000"
      nameSubstring:
        type: string
        example: "box"
        description: "Substring of name for case in-sensitive search"
      title:
        type: string
        example: "клетка midwest icrate 1"
      kind:
        type: integer
        example: 1
      status:
        type: integer
        example: 1
      petSize:
        type: integer
        example: 1
      compensationСost:
        type: integer
        example: 3900
      condition:
        type: string
        example: "удовлетворительное, местами облупляется краска"
      inventoryNumber:
        type: integer
        example: "1"
      supplier:
        type: string
        example: "ИП Григорьев Виталий Васильевич"
      receiptDate:
        type: string
        example: "2018"
      maximumAmount:
        type: integer
        example: 3
      maximumDays:
        type: integer
        example: 30
      order:
        type: integer
        example: 1
      location:
        type: integer
        example: 71
      description:
        type: string
        example: "This is a dog harness.\nWARNING: do not put on cats!"
      photo:
        type: string
        example: "https://..."
      petKinds:
        type: array
        items:
          type: integer

  EquipmentFilter:
    type: object
    properties:
      category:
        type: string
        example: "Клетки"
      name:
        type: string
        example: "Dog harness 3000"
      name_substring:
        type: string
        example: "box"
        description: "Substring of name for case in-sensitive search"
      title:
        type: string
        example: "клетка midwest icrate 1"
      kind:
        type: integer
        example: 1
      status:
        type: integer
        example: 1
      petSize:
        type: integer
        example: 1
      compensationСost:
        type: integer
        example: 3900
      condition:
        type: string
        example: "удовлетворительное, местами облупляется краска"
      inventoryNumber:
        type: integer
        example: "1"
      supplier:
        type: string
        example: "ИП Григорьев Виталий Васильевич"
      receiptDate:
        type: string
        example: "2018"
      maximumAmount:
        type: integer
        example: 3
      maximumDays:
        type: integer
        example: 30
      order:
        type: integer
        example: 1
      location:
        type: integer
        example: 71
      description:
        type: string
        example: "This is a dog harness.\nWARNING: do not put on cats!"
      photo:
        type: string
        example: "https://..."
      petKinds:
        type: array
        items:
          $ref: "#/definitions/PetKind"

  EquipmentResponse:
    type: object
    required:
      - id
      - category
      - name
      - title
      - kind
      - status
      - petSize
      - compensationСost
      - condition
      - inventoryNumber
      - supplier
      - receiptDate
      - maximumAmount
      - maximumDays
      - order
      - location
      - description
      - photo
    properties:
      id:
        type: integer
        example: 1
      category:
        type: string
        example: "Клетки"
      name:
        type: string
        example: "Dog harness 3000"
      title:
        type: string
        example: "клетка midwest icrate 1"
      kind:
        type: integer
        example: 1
      status:
        type: integer
        example: 1
      petSize:
        type: integer
        example: 1
      compensationСost:
        type: integer
        example: 3900
      condition:
        type: string
        example: "удовлетворительное, местами облупляется краска"
      inventoryNumber:
        type: integer
        example: "1"
      supplier:
        type: string
        example: "ИП Григорьев Виталий Васильевич"
      receiptDate:
        type: string
        example: "2018"
      maximumAmount:
        type: integer
        example: 3
      maximumDays:
        type: integer
        example: 30
      order:
        type: integer
        example: 1
      location:
        type: integer
        example: 71
      description:
        type: string
        example: "This is a dog harness.\nWARNING: do not put on cats!"
      photo:
        type: string
        example: "https://..."
      petKinds:
        type: array
        items:
          $ref: "#/definitions/PetKind"
  ListEquipment:
    type: array
    items:
      $ref: "#/definitions/EquipmentResponse"


#PasswordReset
  PasswordReset:
    type: object
    required:
      - id
      - created_at
      - user_id
      - hash
    properties:
      id:
        type: integer
      created_at:
        type: string
      user_id:
        type: integer
      hash:
        type: string
  SendPasswordResetLinkRequest:
   type: object
   required:
    - data
   properties:
    data:
      $ref: "#/definitions/Login"
  PasswordResetResponse:
    type: string

  Login:
    type: object
    required:
      - login
    properties:
      login:
        type: string




  # Order
  OrderCreateRequest:
    type: object
    required:
      - description
      - quantity
      - rent_start
      - rent_end
      - equipment
    properties:
      description:
        type: string
      quantity:
        type: integer
        minimum: 1
      rent_start:
        type: string
        format: date-time
      rent_end:
        type: string
        format: date-time
      equipment:
        type: integer
        minimum: 1
  OrderUpdateRequest:
    type: object
    required:
      - description
      - quantity
      - rent_start
      - rent_end
    properties:
      description:
        type: string
      quantity:
        type: integer
        minimum: 1
      rent_start:
        type: string
        format: date-time
      rent_end:
        type: string
        format: date-time
  Order:
    type: object
    required:
      - id
      - description
      - quantity
      - rent_start
      - rent_end
      - user
      - equipment
      - last_status
    properties:
      id:
        type: integer
      description:
        type: string
      quantity:
        type: integer
      rent_start:
        type: string
        format: date-time
      rent_end:
        type: string
        format: date-time
      user:
        type: object
        $ref: '#/definitions/UserEmbeddable'
      equipment:
        type: object
        $ref: '#/definitions/Equipment'
      last_status:
        type: object
        $ref: '#/definitions/OrderStatus'
  OrderStatuses:
    type: array
    items:
      $ref: '#/definitions/OrderStatus'
  OrderStatus:
    type: object
    required:
      - id
      - comment
      - status
      - created_at
      - changed_by
      - order_id
    properties:
      id:
        type: integer
      comment:
        type: string
      status:
        type: string
      created_at:
        type: string
        format: date-time
      changed_by:
        type: object
        $ref: '#/definitions/UserEmbeddable'
      order_id:
        type: integer
  OrderList:
    type: array
    items:
      $ref: "#/definitions/Order"
  # Order Status
  NewOrderStatus:
    type: object
    required:
      - comment
      - status
      - created_at
      - order_id
    properties:
      comment:
        type: string
      status:
        type: string
      created_at:
        type: string
        format: date-time
      order_id:
        type: integer
  OrderStatusNames:
    type: array
    items:
      $ref: '#/definitions/OrderStatusName'
  OrderStatusName:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
      name:
        type: string