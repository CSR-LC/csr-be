stages:
  - test
  - build
  - deploy

test:
  image: golang:1.17-alpine
  stage: test
  coverage: '/total:\s+\(statements\)\s+(\d+.\d+\%)/'
  variables:
    min_coverage: 80
    coverage_result: '/total:\s+\(statements\)\s+(\d+.\d+)\%/'
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - apk add --update --no-cache git build-base icu-libs icu-dev icu-static && rm -rf /var/cache/apk/*
    - go install github.com/go-swagger/go-swagger/cmd/swagger@v0.30.0 && go install entgo.io/ent/cmd/ent@v0.11.2
    - make generate && make test && make coverage

#integration_tests:
#  image: golang:1.17-alpine
#  stage: integration_test
#  variables:
#    DOCKER_HOST: tcp://docker:2375
#    DOCKER_DRIVER: overlay2
#    DOCKER_TLS_CERTDIR: ""
#  services:
#    - name: docker:20-dind
#      alias: docker
#      command: [ "--tls=false", "--mtu=1300" ]
#      entrypoint: [ "dockerd-entrypoint.sh", "--tls=false" ]
#  rules:
#    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#  script:
#    - apk add --update --no-cache git build-base docker openrc docker-compose && rm -rf /var/cache/apk/*
#    - go install github.com/go-swagger/go-swagger/cmd/swagger@v0.30.0 && go install entgo.io/ent/cmd/ent@v0.11.2
#    - make generate && make integration-test

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    - apk add --update --no-cache git make icu-dev icu-static build-base && rm -rf /var/cache/apk/*
    - go install github.com/go-swagger/go-swagger/cmd/swagger@v0.30.0 && go install entgo.io/ent/cmd/ent@v0.11.2
    - make generate
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --out-format tab | tee ./report.txt
  artifacts:
    paths:
      - report.txt

build:
  image: golang:1.19-alpine
  stage: build
  script:
    - apk add --update --no-cache git make icu-dev icu-static build-base && rm -rf /var/cache/apk/*
    - go install github.com/go-swagger/go-swagger/cmd/swagger@v0.30.0 && go install entgo.io/ent/cmd/ent@v0.11.2
    - make generate
    - CGO_ENABLED=1 GOOS=linux GOARCH=amd64 CGO_LDFLAGS="-lstdc++ -licudata -licuuc" go build -ldflags '-extldflags "-fno-PIC -static"' -buildmode pie -tags 'osusergo netgo static_build sqlite_icu' -o $CI_PROJECT_DIR/csr $CI_PROJECT_DIR/cmd/swagger/main.go
  artifacts:
    paths:
      - csr
      
deploy_stage:
  image: kroniak/ssh-client
  environment:
    name: staging
  stage: deploy
  rules:
    - if: $START_DEPLOY_TO_STAGE == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod -R 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - mkdir ~/csr
    - cat $STAGE_FILE >> ~/csr/stage_file
    - scp -o "StrictHostKeyChecking=no" -P$SSH_PORT -r ./csr $SSH_USER@$SSH_HOST:~/tmp_csr
    - ssh -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST 'rm -rf /var/www/csr/db'
    - scp -o "StrictHostKeyChecking=no" -P$SSH_PORT -r ./db $SSH_USER@$SSH_HOST:/var/www/csr/
    - scp -o "StrictHostKeyChecking=no" -P$SSH_PORT -r ~/csr $SSH_USER@$SSH_HOST:/var/www/csr/
    - ssh -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST 'sudo mv /var/www/csr/csr /etc'
    - ssh -o "StrictHostKeyChecking=no" -p$SSH_PORT $SSH_USER@$SSH_HOST 'sudo systemctl daemon-reload && sudo service csr stop && cp ~/tmp_csr /var/www/csr/server && sudo service csr start'
    - rm ~/csr/stage_file
    - ssh -o "StrictHostKeyChecking=no" $SSH_USER@$SSH_HOST 'sudo rm /etc/csr/stage_file'

deploy_to_prod:
  image: kroniak/ssh-client
  stage: deploy
  environment:
    name: production
  rules:
    - if: $START_DEPLOY_TO_PROD == "true"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
  script:
   - mkdir -p ~/.ssh
   - echo "$SSH_PROD_PRIVATE_KEY" > ~/.ssh/id_rsa
   - chmod -R 700 ~/.ssh
   - echo "$SSH_PROD_KNOWN_HOSTS" >> ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts
   - mkdir -p ~/go/config && echo $PRODUCTION_FILE
   - cat $PRODUCTION_FILE >> ~/go/config/.env
   - scp -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa ~/go/config/.env $SSH_PROD_USER@$SSH_PROD_HOST:/go/.env
   - ssh -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa $SSH_PROD_USER@$SSH_PROD_HOST 'touch /go/stop && sleep 3 && rm /go/stop'
   - sleep 5
   - scp -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa -r ./csr $SSH_PROD_USER@$SSH_PROD_HOST:/go/csr
   - sleep 5
   - ssh -o "StrictHostKeyChecking=no" -i ~/.ssh/id_rsa $SSH_PROD_USER@$SSH_PROD_HOST 'rm -rf /go/db/db'
   - sleep 5
   - scp -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa -r ./db $SSH_PROD_USER@$SSH_PROD_HOST:/go/db
   - sleep 5
   - ssh -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa $SSH_PROD_USER@$SSH_PROD_HOST 'export $(cat /go/.env | xargs)  &&  cd /go && nohup bash -c "./csr >> log.txt 2>&1 &"'
   - sleep 5
   - ssh -o "StrictHostKeyChecking=no" -P$SSH_PROD_PORT -i ~/.ssh/id_rsa $SSH_PROD_USER@$SSH_PROD_HOST 'cat /go/pid && rm ~/go/.env'
   - rm ~/go/config/.env
