stages:
  - build
  - deploy

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  when: manual
  stage: deploy
  script:
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    - golangci-lint run --out-format tab | tee ./report.txt
  artifacts:
    paths:
      - report.txt
  allow_failure: true

build:
  image: golang:1.17-alpine
  stage: build
  script:
    - apk add --update --no-cache git && rm -rf /var/cache/apk/*
    - CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/csr $CI_PROJECT_DIR/cmd/swagger/main.go
  artifacts:
    paths:
      - csr
deploy_stage:
  image: kroniak/ssh-client
  stage: deploy
  when: manual
  script:
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod -R 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - scp -P$SSH_PORT -r ./csr $SSH_USER@$SSH_HOST:~/tmp_csr
    - scp -P$SSH_PORT -r ./db $SSH_USER@$SSH_HOST:/var/www/csr/
    - ssh -p$SSH_PORT $SSH_USER@$SSH_HOST 'sudo service csr stop && cp ~/tmp_csr /var/www/csr/server && sudo service csr start'
