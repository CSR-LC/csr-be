// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"

	time "time"
)

// EquipmentStatusRepository is an autogenerated mock type for the EquipmentStatusRepository type
type EquipmentStatusRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *EquipmentStatusRepository) Create(ctx context.Context, data *models.NewEquipmentStatus) (*ent.EquipmentStatus, error) {
	ret := _m.Called(ctx, data)

	var r0 *ent.EquipmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *models.NewEquipmentStatus) *ent.EquipmentStatus); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.EquipmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.NewEquipmentStatus) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEquipmentsStatusesByOrder provides a mock function with given fields: ctx, orderID
func (_m *EquipmentStatusRepository) GetEquipmentsStatusesByOrder(ctx context.Context, orderID int) ([]*ent.EquipmentStatus, error) {
	ret := _m.Called(ctx, orderID)

	var r0 []*ent.EquipmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, int) []*ent.EquipmentStatus); ok {
		r0 = rf(ctx, orderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.EquipmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAvailableByPeriod provides a mock function with given fields: ctx, eqID, startDate, endDate
func (_m *EquipmentStatusRepository) IsAvailableByPeriod(ctx context.Context, eqID int, startDate time.Time, endDate time.Time) (bool, error) {
	ret := _m.Called(ctx, eqID, startDate, endDate)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, int, time.Time, time.Time) bool); ok {
		r0 = rf(ctx, eqID, startDate, endDate)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, time.Time, time.Time) error); ok {
		r1 = rf(ctx, eqID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data
func (_m *EquipmentStatusRepository) Update(ctx context.Context, data *models.EquipmentStatus) (*ent.EquipmentStatus, error) {
	ret := _m.Called(ctx, data)

	var r0 *ent.EquipmentStatus
	if rf, ok := ret.Get(0).(func(context.Context, *models.EquipmentStatus) *ent.EquipmentStatus); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.EquipmentStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.EquipmentStatus) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEquipmentStatusRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEquipmentStatusRepository creates a new instance of EquipmentStatusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEquipmentStatusRepository(t mockConstructorTestingTNewEquipmentStatusRepository) *EquipmentStatusRepository {
	mock := &EquipmentStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
