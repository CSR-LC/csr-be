// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// CategoryRepository is an autogenerated mock type for the CategoryRepository type
type CategoryRepository struct {
	mock.Mock
}

// AllCategories provides a mock function with given fields: ctx, limit, offset, orderBy, orderColumn
func (_m *CategoryRepository) AllCategories(ctx context.Context, limit int, offset int, orderBy string, orderColumn string) ([]*ent.Category, error) {
	ret := _m.Called(ctx, limit, offset, orderBy, orderColumn)

	var r0 []*ent.Category
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []*ent.Category); ok {
		r0 = rf(ctx, limit, offset, orderBy, orderColumn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, limit, offset, orderBy, orderColumn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllCategoriesTotal provides a mock function with given fields: ctx
func (_m *CategoryRepository) AllCategoriesTotal(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryByEquipmentID provides a mock function with given fields: ctx, equipmentID
func (_m *CategoryRepository) CategoryByEquipmentID(ctx context.Context, equipmentID int) (*ent.Category, error) {
	ret := _m.Called(ctx, equipmentID)

	var r0 *ent.Category
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Category); ok {
		r0 = rf(ctx, equipmentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, equipmentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CategoryByID provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) CategoryByID(ctx context.Context, id int) (*ent.Category, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Category
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Category); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCategory provides a mock function with given fields: ctx, newCategory
func (_m *CategoryRepository) CreateCategory(ctx context.Context, newCategory models.CreateNewCategory) (*ent.Category, error) {
	ret := _m.Called(ctx, newCategory)

	var r0 *ent.Category
	if rf, ok := ret.Get(0).(func(context.Context, models.CreateNewCategory) *ent.Category); ok {
		r0 = rf(ctx, newCategory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.CreateNewCategory) error); ok {
		r1 = rf(ctx, newCategory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCategoryByID provides a mock function with given fields: ctx, id
func (_m *CategoryRepository) DeleteCategoryByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCategory provides a mock function with given fields: ctx, id, update
func (_m *CategoryRepository) UpdateCategory(ctx context.Context, id int, update models.UpdateCategoryRequest) (*ent.Category, error) {
	ret := _m.Called(ctx, id, update)

	var r0 *ent.Category
	if rf, ok := ret.Get(0).(func(context.Context, int, models.UpdateCategoryRequest) *ent.Category); ok {
		r0 = rf(ctx, id, update)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Category)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, models.UpdateCategoryRequest) error); ok {
		r1 = rf(ctx, id, update)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCategoryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCategoryRepository creates a new instance of CategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCategoryRepository(t mockConstructorTestingTNewCategoryRepository) *CategoryRepository {
	mock := &CategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
