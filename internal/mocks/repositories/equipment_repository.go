// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// EquipmentRepository is an autogenerated mock type for the EquipmentRepository type
type EquipmentRepository struct {
	mock.Mock
}

// AllEquipments provides a mock function with given fields: ctx
func (_m *EquipmentRepository) AllEquipments(ctx context.Context) ([]*ent.Equipment, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.Equipment
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Equipment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEquipment provides a mock function with given fields: ctx, eq
func (_m *EquipmentRepository) CreateEquipment(ctx context.Context, eq models.Equipment) (*ent.Equipment, error) {
	ret := _m.Called(ctx, eq)

	var r0 *ent.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, models.Equipment) *ent.Equipment); ok {
		r0 = rf(ctx, eq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Equipment) error); ok {
		r1 = rf(ctx, eq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEquipmentByID provides a mock function with given fields: ctx, id
func (_m *EquipmentRepository) DeleteEquipmentByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EquipmentByID provides a mock function with given fields: ctx, id
func (_m *EquipmentRepository) EquipmentByID(ctx context.Context, id int) (*ent.Equipment, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.Equipment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EquipmentsByFilter provides a mock function with given fields: ctx, filter
func (_m *EquipmentRepository) EquipmentsByFilter(ctx context.Context, filter models.EquipmentFilter) ([]*ent.Equipment, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*ent.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, models.EquipmentFilter) []*ent.Equipment); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.EquipmentFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEquipmentByID provides a mock function with given fields: ctx, id, eq
func (_m *EquipmentRepository) UpdateEquipmentByID(ctx context.Context, id int, eq *models.Equipment) (*ent.Equipment, error) {
	ret := _m.Called(ctx, id, eq)

	var r0 *ent.Equipment
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.Equipment) *ent.Equipment); ok {
		r0 = rf(ctx, id, eq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Equipment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *models.Equipment) error); ok {
		r1 = rf(ctx, id, eq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEquipmentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEquipmentRepository creates a new instance of EquipmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEquipmentRepository(t mockConstructorTestingTNewEquipmentRepository) *EquipmentRepository {
	mock := &EquipmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
