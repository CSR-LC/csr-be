// Code generated by mockery v2.13.0-beta.1. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// PetSizeRepository is an autogenerated mock type for the PetSizeRepository type
type PetSizeRepository struct {
	mock.Mock
}

// AllPetSizes provides a mock function with given fields: ctx
func (_m *PetSizeRepository) AllPetSizes(ctx context.Context) ([]*ent.PetSize, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.PetSize
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.PetSize); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.PetSize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePetSize provides a mock function with given fields: ctx, ps
func (_m *PetSizeRepository) CreatePetSize(ctx context.Context, ps models.PetSize) (*ent.PetSize, error) {
	ret := _m.Called(ctx, ps)

	var r0 *ent.PetSize
	if rf, ok := ret.Get(0).(func(context.Context, models.PetSize) *ent.PetSize); ok {
		r0 = rf(ctx, ps)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.PetSize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.PetSize) error); ok {
		r1 = rf(ctx, ps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePetSizeByID provides a mock function with given fields: ctx, id
func (_m *PetSizeRepository) DeletePetSizeByID(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PetSizeByID provides a mock function with given fields: ctx, id
func (_m *PetSizeRepository) PetSizeByID(ctx context.Context, id int) (*ent.PetSize, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.PetSize
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.PetSize); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.PetSize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePetSizeByID provides a mock function with given fields: ctx, id, newPetSize
func (_m *PetSizeRepository) UpdatePetSizeByID(ctx context.Context, id int, newPetSize *models.PetSize) (*ent.PetSize, error) {
	ret := _m.Called(ctx, id, newPetSize)

	var r0 *ent.PetSize
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PetSize) *ent.PetSize); ok {
		r0 = rf(ctx, id, newPetSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.PetSize)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *models.PetSize) error); ok {
		r1 = rf(ctx, id, newPetSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPetSizeRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPetSizeRepository creates a new instance of PetSizeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPetSizeRepository(t NewPetSizeRepositoryT) *PetSizeRepository {
	mock := &PetSizeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
