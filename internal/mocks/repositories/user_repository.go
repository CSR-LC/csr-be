// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// ChangePasswordByLogin provides a mock function with given fields: ctx, login, password
func (_m *UserRepository) ChangePasswordByLogin(ctx context.Context, login string, password string) error {
	ret := _m.Called(ctx, login, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ConfirmRegistration provides a mock function with given fields: ctx, login
func (_m *UserRepository) ConfirmRegistration(ctx context.Context, login string) error {
	ret := _m.Called(ctx, login)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, data
func (_m *UserRepository) CreateUser(ctx context.Context, data *models.UserRegister) (*ent.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserRegister) *ent.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.UserRegister) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserByID(ctx context.Context, id int) (*ent.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepository) GetUserByLogin(ctx context.Context, login string) (*ent.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserRole provides a mock function with given fields: ctx, userId, roleId
func (_m *UserRepository) SetUserRole(ctx context.Context, userId int, roleId int) error {
	ret := _m.Called(ctx, userId, roleId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, roleId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserByID provides a mock function with given fields: ctx, id, patch
func (_m *UserRepository) UpdateUserByID(ctx context.Context, id int, patch *models.PatchUserRequest) error {
	ret := _m.Called(ctx, id, patch)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.PatchUserRequest) error); ok {
		r0 = rf(ctx, id, patch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepository) UserByLogin(ctx context.Context, login string) (*ent.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields: ctx, limit, offset, orderBy, orderColumn
func (_m *UserRepository) UserList(ctx context.Context, limit int, offset int, orderBy string, orderColumn string) ([]*ent.User, error) {
	ret := _m.Called(ctx, limit, offset, orderBy, orderColumn)

	var r0 []*ent.User
	if rf, ok := ret.Get(0).(func(context.Context, int, int, string, string) []*ent.User); ok {
		r0 = rf(ctx, limit, offset, orderBy, orderColumn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, string, string) error); ok {
		r1 = rf(ctx, limit, offset, orderBy, orderColumn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersListTotal provides a mock function with given fields: ctx
func (_m *UserRepository) UsersListTotal(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
