// Code generated by mockery v2.9.4. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, data
func (_m *UserRepository) CreateUser(ctx context.Context, data *models.UserRegister) (*ent.User, error) {
	ret := _m.Called(ctx, data)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserRegister) *ent.User); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.UserRegister) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepository) GetUserByLogin(ctx context.Context, login string) (*ent.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUserRole provides a mock function with given fields: ctx, userId, roleId
func (_m *UserRepository) SetUserRole(ctx context.Context, userId int, roleId int) (*ent.User, error) {
	ret := _m.Called(ctx, userId, roleId)

	var r0 *ent.User
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *ent.User); ok {
		r0 = rf(ctx, userId, roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userId, roleId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
