// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	mock "github.com/stretchr/testify/mock"

	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// OrderRepository is an autogenerated mock type for the OrderRepository type
type OrderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data, ownerId, equipmentIDs
func (_m *OrderRepository) Create(ctx context.Context, data *models.OrderCreateRequest, ownerId int, equipmentIDs []int) (*ent.Order, error) {
	ret := _m.Called(ctx, data, ownerId, equipmentIDs)

	var r0 *ent.Order
	if rf, ok := ret.Get(0).(func(context.Context, *models.OrderCreateRequest, int, []int) *ent.Order); ok {
		r0 = rf(ctx, data, ownerId, equipmentIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.OrderCreateRequest, int, []int) error); ok {
		r1 = rf(ctx, data, ownerId, equipmentIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, ownerId, limit, offset, orderBy, orderColumn
func (_m *OrderRepository) List(ctx context.Context, ownerId int, limit int, offset int, orderBy string, orderColumn string) ([]*ent.Order, error) {
	ret := _m.Called(ctx, ownerId, limit, offset, orderBy, orderColumn)

	var r0 []*ent.Order
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int, string, string) []*ent.Order); ok {
		r0 = rf(ctx, ownerId, limit, offset, orderBy, orderColumn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, int, string, string) error); ok {
		r1 = rf(ctx, ownerId, limit, offset, orderBy, orderColumn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrdersTotal provides a mock function with given fields: ctx, ownerId
func (_m *OrderRepository) OrdersTotal(ctx context.Context, ownerId int) (int, error) {
	ret := _m.Called(ctx, ownerId)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, ownerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, data, ownerId
func (_m *OrderRepository) Update(ctx context.Context, id int, data *models.OrderUpdateRequest, ownerId int) (*ent.Order, error) {
	ret := _m.Called(ctx, id, data, ownerId)

	var r0 *ent.Order
	if rf, ok := ret.Get(0).(func(context.Context, int, *models.OrderUpdateRequest, int) *ent.Order); ok {
		r0 = rf(ctx, id, data, ownerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, *models.OrderUpdateRequest, int) error); ok {
		r1 = rf(ctx, id, data, ownerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderRepository creates a new instance of OrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderRepository(t mockConstructorTestingTNewOrderRepository) *OrderRepository {
	mock := &OrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
