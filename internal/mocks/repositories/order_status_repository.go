// Code generated by mockery v2.13.1. DO NOT EDIT.

package repositories

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	ent "git.epam.com/epm-lstr/epm-lstr-lc/be/ent"
	models "git.epam.com/epm-lstr/epm-lstr-lc/be/swagger/generated/models"
)

// OrderStatusRepository is an autogenerated mock type for the OrderStatusRepository type
type OrderStatusRepository struct {
	mock.Mock
}

// GetOrderCurrentStatus provides a mock function with given fields: ctx, orderId
func (_m *OrderStatusRepository) GetOrderCurrentStatus(ctx context.Context, orderId int) (*ent.OrderStatus, error) {
	ret := _m.Called(ctx, orderId)

	var r0 *ent.OrderStatus
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.OrderStatus); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.OrderStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserStatusHistory provides a mock function with given fields: ctx, userId
func (_m *OrderStatusRepository) GetUserStatusHistory(ctx context.Context, userId int) ([]*ent.OrderStatus, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*ent.OrderStatus
	if rf, ok := ret.Get(0).(func(context.Context, int) []*ent.OrderStatus); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.OrderStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StatusHistory provides a mock function with given fields: ctx, orderId
func (_m *OrderStatusRepository) StatusHistory(ctx context.Context, orderId int) ([]*ent.OrderStatus, error) {
	ret := _m.Called(ctx, orderId)

	var r0 []*ent.OrderStatus
	if rf, ok := ret.Get(0).(func(context.Context, int) []*ent.OrderStatus); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.OrderStatus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: ctx, userID, status
func (_m *OrderStatusRepository) UpdateStatus(ctx context.Context, userID int, status models.NewOrderStatus) error {
	ret := _m.Called(ctx, userID, status)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, models.NewOrderStatus) error); ok {
		r0 = rf(ctx, userID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewOrderStatusRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderStatusRepository creates a new instance of OrderStatusRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderStatusRepository(t mockConstructorTestingTNewOrderStatusRepository) *OrderStatusRepository {
	mock := &OrderStatusRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
